ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", 'red'), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
predEarningsPlot = ggplot(test, aes(during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", 'red'), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
predEarningsPlot = ggplot(test, aes(test$during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", 'red'), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
predEarningsPlot = ggplot(test, aes(test$during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", 'E69F00'), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
predEarningsPlot = ggplot(test, aes(test$during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College")
predEarningsPlot
test
ggplot(test, aes(test$during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College")
ggplot(test, aes(x=test$during.cluster, y=value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College")
colnames(md)
lm.data = model.data[,c(-2,-7,-9)]
colnames(lm.data)
lm.model = lm(X10_yrs_after_entry.working_not_enrolled.mean_earnings ~., lm.data)
lm.test.data = lm.data
(colNames = colnames(lm.test.data))
lm.test.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings = lm.test.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings
lm.test.data = lm.test.data[,-6]
lm.pred = predict(lm.model, lm.test.data)
lm.model.data = cbind(lm.data[,c(1,5:6)],lm.pred)
(pred.data = aggregate(x=cbind(x6 = lm.model.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x10 = lm.model.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
pred = lm.model.data$lm.pred),
by = list(Ownership=lm.model.data$ownership),
FUN = mean))
test = melt(pred.data)
years = c(6,6,6,10,10,10,18,18,18)
test$variable = years
test$log = log(test$value)
test$years = years
levels(test$Ownership)
predEarningsPlot = ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
ggplot(test, aes(Ownership, log, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge')
ggplot(test, aes(Ownership, value)) + geom_bar(stat = 'identity', position = 'dodge')
ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge')
test
EarningsPlot
rateChangePlot
predEarningsPlot = ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
test
debtPlot
deptMelt
test$variable = as.factor(years)
test$log = log(test$value)
test$years = years
levels(test$Ownership)
predEarningsPlot = ggplot(test, aes(test$during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", 'E69F00'), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
predEarningsPlot = ggplot(test, aes(test$during.cluster, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
test = melt(pred.data)
colnames(md)
lm.data = model.data[,c(-2,-7,-9)]
colnames(lm.data)
lm.model = lm(X10_yrs_after_entry.working_not_enrolled.mean_earnings ~., lm.data)
lm.test.data = lm.data
(colNames = colnames(lm.test.data))
lm.test.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings = lm.test.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings
lm.test.data = lm.test.data[,-6]
lm.pred = predict(lm.model, lm.test.data)
lm.model.data = cbind(lm.data[,c(1,5:6)],lm.pred)
(pred.data = aggregate(x=cbind(x6 = lm.model.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x10 = lm.model.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
pred = lm.model.data$lm.pred),
by = list(Ownership=lm.model.data$ownership),
FUN = mean))
test = melt(pred.data)
test
years = c(6,6,6,10,10,10,18,18,18)
test$variable = years
test
levels(test$Ownership)
ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
debtPlot
levels(test$during.cluster)
model.data.M = scorecard[,c(39,2,7,8,22,37,38,33,34)]
lm.data = model.data.M[,c(-2,-7,-9)]
colnames(lm.data)
lm.model = lm(X10_yrs_after_entry.working_not_enrolled.mean_earnings ~., lm.data)
lm.test.data = lm.data
(colNames = colnames(lm.test.data))
lm.test.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings = lm.test.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings
lm.test.data = lm.test.data[,-6]
lm.pred = predict(lm.model, lm.test.data)
lm.model.data = cbind(lm.data[,c(1,5:6)],lm.pred)
(pred.data = aggregate(x=cbind(x6 = lm.model.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x10 = lm.model.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
pred = lm.model.data$lm.pred),
by = list(Ownership=lm.model.data$during.cluster),
FUN = mean))
pred.data
test = melt(pred.data)
years = c(6,6,6,6,10,10,10,10,18,18,18,18)
test$variable = as.factor(years)
test$log = log(test$value)
test$years = years
levels(test$during.cluster)
test
predEarningsPlot = ggplot(test, aes(test$Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
predEarningsPlot.M = ggplot(test, aes(test$Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot.M
lm.data = model.data[,c(-2,-7,-9)]
colnames(lm.data)
lm.model = lm(X10_yrs_after_entry.working_not_enrolled.mean_earnings ~., lm.data)
lm.test.data = lm.data
(colNames = colnames(lm.test.data))
lm.test.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings = lm.test.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings
lm.test.data = lm.test.data[,-6]
lm.pred = predict(lm.model, lm.test.data)
lm.model.data = cbind(lm.data[,c(1,5:6)],lm.pred)
(pred.data = aggregate(x=cbind(x6 = lm.model.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x10 = lm.model.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
pred = lm.model.data$lm.pred),
by = list(Ownership=lm.model.data$ownership),
FUN = mean))
test = melt(pred.data)
years = c(6,6,6,10,10,10,18,18,18)
test$variable = years
test$log = log(test$value)
test$years = years
levels(test$Ownership)
ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
test$variable = as.factor(year)
test$log = log(test$value)
test$years = years
levels(test$Ownership)
ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
levels(test$Ownership)
ggplot(test, aes(Ownership, value)) + geom_bar(stat = 'identity', position = 'dodge')
test
test$variable = as.factor(year)
ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
test$years = years
ggplot(test, aes(Ownership, value, fill=years)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
levels(test$variable)
test = melt(pred.data)
years = c(6,6,6,10,10,10,18,18,18)
test$variable = as.factor(years)
levels(test$variable)
test$log = log(test$value)
test$years = years
levels(test$Ownership)
ggplot(test, aes(Ownership, value, fill=years)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot = ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot
# change is good
plotTable(fin.data[,-5])
# success
plotTable(fin.data[,c(1,5)])
plotTable(fin.data[,-2])
# it's all about the benjamins
plotTable(forPres)
# change is good
plotTable(fin.data[,-5])
fin.data.M = Financial.Maggie[,c(1,4,7,9)]
fin.data.M
plotTable(fin.data.M[,-5])
colnames(fin.data.M) = c('Ownership','Loan Principal','Earnings 6yrs', 'Earnings 10yrs','Earnings ~20yrs')
plotTable(fin.data.M[,-5])
plotTable(fin.data)
debtPlot.M
# box plots, and outliers, and quartiles, oh my!
(debtPlotBox = ggplot(box.data.melt.M, aes(during.cluster, value, fill=variable)) + geom_boxplot() +
ggtitle("Average Earnings") + scale_fill_manual(values=c("#999999", "#E69F00"), name="Legend", labels=c('6 Years','10 Years')) +
xlab(label = '') + ylab(label = 'Income') )
predEarningsPlot.M
model.data.M = scorecard[,c(39,2,7,8,22,37,38,33,34)]
model.data.M = scorecard[,c(39,2,7,8,22,37,38,33,34)]
lm.data = model.data.M[,c(-2,-7,-9)]
colnames(lm.data)
lm.model = lm(X10_yrs_after_entry.working_not_enrolled.mean_earnings ~., lm.data)
lm.test.data = lm.data
(colNames = colnames(lm.test.data))
lm.test.data = lm.test.data[,-6]
lm.test.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings = lm.test.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings
lm.pred = predict(lm.model, lm.test.data)
lm.model.data = cbind(lm.data[,c(1,5:6)],lm.pred)
(pred.data = aggregate(x=cbind(x6 = lm.model.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x10 = lm.model.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
pred = lm.model.data$lm.pred),
by = list(Ownership=lm.model.data$during.cluster),
FUN = mean))
test = melt(pred.data)
years = c(6,6,6,6,10,10,10,10,18,18,18,18)
test$variable = as.factor(years)
test$log = log(test$value)
test$years = years
levels(test$during.cluster)
predEarningsPlot.M = ggplot(test, aes(test$Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot.M
predEarningsPlot.M = ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot.M
#plots
dev.off(dev.list()["RStudioGD"]) # clear plots
plotTable(fin.data.M[,-5])
colnames(fin.data.M) = c('Ownership','Loan Principal','Earnings 6yrs', 'Earnings 10yrs','Earnings ~20yrs')
fin.data.M
colnames(fin.data.M) = c('Ownership','Loan Principal','Earnings 6yrs', 'Earnings 10yrs')
plotTable(fin.data.M[,-5])
#plots
dev.off(dev.list()["RStudioGD"]) # clear plots
fin.data.M
plotTable(fin.data.M)
model.data.M
View(loanPrincipalPlot)
View(model.data.M)
str(model.data.M)
md.mag = model.data.M
model.data.list.M = testingSample(md.mag)
trng.data.m = model.data.list.M[[1]]
test.data.m = model.data.list.M[[2]]
rf.model.m = randomForest(ownership ~., trng.data.m[,-2])
View(trng.data.m)
rf.model.m = randomForest(during.cluster ~., trng.data.m[,-2])
# summary(rf.model)
# importance(rf.model)
rf.pred.m = predict(rf.model.m, test.data.m[,-2], type='class')
rf.table.m = table(rf.pred.m, test.data.m$during.cluster )
(rf.matrix.m = confusionMatrix(rf.table.m))
# summary(rf.model)
# importance(rf.model.m)
rf.pred.m = predict(rf.model.m, test.data.m[,-2], type='class')
importance(rf.model.m)
#scorecard <- read.csv("scorecard-3.csv", stringsAsFactors = FALSE)
scorecard = C.SCORE.CARD.DATA.OG
# There are 2 "emmanuel colleges", so I added theie states to them so that we can use name as a unique identifier
scorecard$name.id <- ifelse(scorecard$name == "Emmanuel College" & scorecard$state=="GA", "Emmanuel College (GA)",
ifelse(scorecard$name == "Emmanuel College" & scorecard$state == "MA", "Emmanuel College (MA)", scorecard$name))
scorecard = toFactor(scorecard, c(1:5))
#str(data.csc[,6:12])
scorecard = toInteger(scorecard, c(7:12)) # nulls turned to NA
scorecard = toNumeric(scorecard, c(6))
#str(data.csc[,12:20])
scorecard = toNumeric(scorecard, c(17:20))
#str(data.csc[,21:30])
scorecard = toNumeric(scorecard, c(21:30))
#str(data.csc[,31:39])
scorecard = toNumeric(scorecard, c(31:39))
str(scorecard)
naInData(scorecard)
#sat.writing.data = data.csc$sat_scores.midpoint.writing
scorecard = scorecard[,-9]
scorecard = noNas(scorecard)
naInData(scorecard)
colnames(scorecard[,1:10])
# read in cluster assignments
clusters <- read.csv("during.clusters.csv")
# join to scorecard dataset
library(dplyr)
scorecard <- scorecard %>%
left_join(clusters, by = c("name.id"="name"))
str(scorecard)
scorecard$during.cluster <- factor(scorecard$during.cluster)
# if you want to remove the name.id column:
scorecard <- scorecard %>% select(-name.id)
str(scorecard)
test.revalue = revalue(scorecard$during.cluster, c('1'='Entry Level', '2'='Stable', '3'='Reachers', '4'='Privileged'))
scorecard$during.cluster = test.revalue
(Financial.Maggie = aggregate(x=cbind(
SAT.Reading = scorecard$sat_scores.midpoint.critical_reading,
SAT.Math = scorecard$sat_scores.midpoint.math,
Loan.Principal = scorecard$loan_principal, #
PellGrant.Debt = scorecard$median_debt.pell_grant,
NoPellGrant.Debt = scorecard$median_debt.no_pell_grant,
x6.Earnings.mean = scorecard$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x6.Earnings.median = scorecard$X6_yrs_after_entry.median,
x10.Earnings.mean = scorecard$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
x10.Earnins.median = scorecard$X10_yrs_after_entry.median),
by = list(Ownership = scorecard$during.cluster),
FUN = mean))
dept.M = Financial.Maggie[,c(1,5,6)]
deptMelt.M = melt(dept.M, id.vars = 'Ownership')
debtPlot.M = ggplot(deptMelt.M, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Student Dept") + scale_fill_manual(values=c("#999999", "#E69F00"), name="Legend", labels=c('Pell Grant','No Pell Grant'))
debtPlot.M
colnames(scorecard)
box.data.M = scorecard[,c(39,37,33)]
box.data.melt.M = melt(box.data.M)
# box plots, and outliers, and quartiles, oh my!
(debtPlotBox = ggplot(box.data.melt.M, aes(during.cluster, value, fill=variable)) + geom_boxplot() +
ggtitle("Average Earnings") + scale_fill_manual(values=c("#999999", "#E69F00"), name="Legend", labels=c('6 Years','10 Years')) +
xlab(label = '') + ylab(label = 'Income') )
model.data.M = scorecard[,c(39,2,7,8,22,37,38,33,34)]
lm.data = model.data.M[,c(-2,-7,-9)]
colnames(lm.data)
lm.model = lm(X10_yrs_after_entry.working_not_enrolled.mean_earnings ~., lm.data)
lm.test.data = lm.data
(colNames = colnames(lm.test.data))
lm.test.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings = lm.test.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings
lm.test.data = lm.test.data[,-6]
lm.pred = predict(lm.model, lm.test.data)
lm.model.data = cbind(lm.data[,c(1,5:6)],lm.pred)
(pred.data = aggregate(x=cbind(x6 = lm.model.data$X6_yrs_after_entry.working_not_enrolled.mean_earnings,
x10 = lm.model.data$X10_yrs_after_entry.working_not_enrolled.mean_earnings,
pred = lm.model.data$lm.pred),
by = list(Ownership=lm.model.data$during.cluster),
FUN = mean))
test = melt(pred.data)
years = c(6,6,6,6,10,10,10,10,18,18,18,18)
test$variable = as.factor(years)
test$log = log(test$value)
test$years = years
levels(test$during.cluster)
predEarningsPlot.M = ggplot(test, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name="Legend", labels=c('After 6 Years','After 10 Years','After ~20 Years'))
predEarningsPlot.M
fin.data.M = Financial.Maggie[,c(1,4,7,9)]
colnames(fin.data.M) = c('Ownership','Loan Principal','Earnings 6yrs', 'Earnings 10yrs')
plotTable(fin.data.M)
#plots
dev.off(dev.list()["RStudioGD"]) # clear plots
plotTable(fin.data.M)
Financial.Maggie
rbind(Financial, Financial.Maggie)
SAT.data = data.frame(rbind(Financial[,c(1,2,3)], Financial.Maggie[,c(1,2,3)]))
plotTable(SAT.data)
round(Financial[,2])
SAT.data$SAT.Reading = round(SAT.data$SAT.Reading)
SAT.data$SAT.Math = round(SAT.data$SAT.Math)
plotTable(SAT.data)
#plots
dev.off(dev.list()["RStudioGD"]) # clear plots
plotTable(SAT.data)
Financial.Maggie
test
test
pfnp = test[test$Ownership == "Entry Level",]
pfp = test[test$Ownership == "Stable",]
pub = test[test$Ownership == "Reachers" ,]
pub1 = test[test$Ownership == "Privileged" ,]
pfnp = pfnp[,c(3,5)]
pfnp
colnames(pfnp) = c('Entry Level','pfnp_years')
pfnp$pfnp_log = log(pfnp$pfnp_earnings)
pfnp$pfnp_log = log(pfnp$`Entry Level`)
pfp = pfp[,c(3,5)]
pfp = pfp[,c(3,5)]
colnames(pfp) = c('Stable','pfp_years')
pfp$pfp_log = log(pfp$Stable)
pfp
pfnp
pub = pub[,c(3,5)]
colnames(pub) = c('Reachers','pub_years')
pub$pub_log = log(pub$Reachers)
pub
pub1 = pub1[,c(3,5)]
colnames(pub1) = c('Privileged','pub_years')
pub1$pub_log = log(pub1$Privileged)
pub1
log.data.m = cbind(pfp,pfnp,pub,pub1)
log.data.m
pfnp = test[test$Ownership == "Entry Level",]
pfp = test[test$Ownership == "Stable",]
pub = test[test$Ownership == "Reachers" ,]
pub1 = test[test$Ownership == "Privileged" ,]
pfnp = pfnp[,c(3,5)]
colnames(pfnp) = c('Entry Level','pfnp_years')
pfnp$pfnp_log = log(pfnp$`Entry Level`)
pfp = pfp[,c(3,5)]
colnames(pfp) = c('Stable','pfp_years')
pfp$pfp_log = log(pfp$Stable)
pub = pub[,c(3,5)]
colnames(pub) = c('Reachers','pub_years')
pub$pub_log = log(pub$Reachers)
pub1 = pub1[,c(3,5)]
colnames(pub1) = c('Privileged','pub1_years')
pub1$pub_log = log(pub1$Privileged)
log.data.m = cbind(pfp,pfnp,pub,pub1)
log.data.m = cbind(pfp,pfnp,pub,pub1)
log.data.m
pub1 = pub1[,c(3,5)]
colnames(pub1) = c('Privileged','pub1_years')
pub1$pub_log1 = log(pub1$Privileged)
log.data.m = cbind(pfp,pfnp,pub,pub1)
(rateChangePlot = ggplot(log.data, aes(x= pub_years)) +
geom_line(aes(y = pub_log), color = 'darkgreen') +
geom_line(aes(y = pfnp_log), color = 'darkorange') +
geom_line(aes(y = pfp_log), color = 'darkred') +
geom_line(aes(y = pfp_log), color = 'darkred')+ xlab(label = 'Years') + ylab(label = 'Rate of Change'))
log.data.m
log(pub1$Privileged)
pub1$pub_log1
(rateChangePlot = ggplot(log.data, aes(x= pub_years)) +
geom_line(aes(y = pub_log), color = 'darkgreen') +
geom_line(aes(y = pfnp_log), color = 'darkorange') +
geom_line(aes(y = pfp_log), color = 'darkred') +
geom_line(aes(y = pub_log1), color = 'darkblue') + xlab(label = 'Years') + ylab(label = 'Rate of Change'))
log.data.m = cbind(pfp,pfnp,pub,pub1)
(rateChangePlot = ggplot(log.data, aes(x= pub_years)) +
geom_line(aes(y = pub_log), color = 'darkgreen') +
geom_line(aes(y = pfnp_log), color = 'darkorange') +
geom_line(aes(y = pfp_log), color = 'darkred') +
geom_line(aes(y = pub_log1), color = 'darkblue') + xlab(label = 'Years') + ylab(label = 'Rate of Change'))
log.data
(rateChangePlot = ggplot(log.data, aes(x= pub_years)) +
geom_line(aes(y = pub_log), color = 'darkgreen') +
geom_line(aes(y = pfnp_log), color = 'darkorange') +
geom_line(aes(y = pfp_log), color = 'darkred') +
geom_line(aes(y = v1), color = 'darkblue') + xlab(label = 'Years') + ylab(label = 'Rate of Change'))
(rateChangePlot = ggplot(log.data, aes(x= pub_years)) +
geom_line(aes(y = pub_log), color = 'darkgreen') +
geom_line(aes(y = pfnp_log), color = 'darkorange') +
geom_line(aes(y = pfp_log), color = 'darkred') +
geom_line(aes(y = log.data$v1), color = 'darkblue') + xlab(label = 'Years') + ylab(label = 'Rate of Change'))
log.data.m
(rateChangePlot = ggplot(log.data.m, aes(x= pub_years)) +
geom_line(aes(y = pub_log), color = 'darkgreen') +
geom_line(aes(y = pfnp_log), color = 'darkorange') +
geom_line(aes(y = pfp_log), color = 'darkred') +
geom_line(aes(y = pub_log1), color = 'darkblue') + xlab(label = 'Years') + ylab(label = 'Rate of Change'))
Financial.Maggie
fin.data.M
Financial.Maggie
pred.data
predPlotDF = pred.data
predPlotDF
colnames(predPlotDF) = c('Ownership','Earnings 6yrs', 'Earnings 10yrs','Earnings ~20yrs')
plotTable(predPlotDF)
#plots
dev.off(dev.list()["RStudioGD"]) # clear plots
plotTable(predPlotDF)
rect(150, 430, 240, 370, col='#3F97D0')
data.frame(buy = dvd$buy, pred1 = runif(20000), pred2 = ifelse(dvd$buy == "yes", 1, 0)) %>%
confusion(c("pred1", "pred2"), "buy") %>%
plot()
data.frame(buy = dvd$buy, pred1 = runif(20000), pred2 = ifelse(dvd$buy == "yes", 1, 0)) %>%
confusion(c("pred1", "pred2"), "buy") %>%
plot()
loadLibraries()
qplot(rf.pred, test.data$ownership, data=test.data, colour= classe_var, geom = c("boxplot", "jitter"), main = "predicted vs. observed in validation data", xlab = "Observed Classe", ylab = "Predicted Classe")
qplot(rf.pred, test.data$ownership, data=test.data, colour= rf.pred, geom = c("boxplot", "jitter"), main = "predicted vs. observed in validation data", xlab = "Observed Classe", ylab = "Predicted Classe")
qplot(rf.pred, test.data.m$during.cluster, data=test.data.m colour= rf.pred, geom = c("boxplot", "jitter"), main = "predicted vs. observed in validation data", xlab = "Observed Classe", ylab = "Predicted Classe")
qplot(rf.pred, test.data.m$during.cluster, data=test.data.m, colour= rf.pred, geom = c("boxplot", "jitter"), main = "predicted vs. observed in validation data", xlab = "Observed Classe", ylab = "Predicted Classe")
qplot(rf.pred.m, test.data.m$during.cluster, data=test.data.m, colour= rf.pred, geom = c("boxplot", "jitter"), main = "predicted vs. observed in validation data", xlab = "Observed Classe", ylab = "Predicted Classe")
(nb.matrix1 = confusionMatrix(table(nb.pred1, test.data$ownership)))
(nb.matrix1 = confusionMatrix(table(nb.pred1, test.data$ownership)))
loadLibraries()
(nb.matrix1 = confusionMatrix(table(nb.pred1, test.data$ownership)))
draw_confusion_matrix(rf.matrix, 'Private nonprofit', 'Public', 'Random Forest')
draw_confusion_matrix(nb.matrix1, 'Private nonprofit', 'Public', 'Naive Bayes')
draw_confusion_matrix(svm.matrix1, 'Private nonprofit', 'Public', 'Support Vector Machines')
View(trng.data)
(loanPrincipalPlot = mapPlot + geom_map(map = us, aes(fill = Loan.Principal), color = "black") +
expand_limits(x = us$long, y = us$lat) +
coord_map() + ggtitle("Avg College Dept") + scale_fill_gradient(low='white', high='darkblue', name="School Debt") +
xlab(label = '') + ylab(label = ''))
# free money
(debtPlot = ggplot(deptMelt, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
xlab(label = '') + ylab(label = 'Income') + ggtitle("Student Dept") +
scale_fill_manual(values=c("#999999", "#E69F00"), name="Legend", labels=c('Pell Grant','No Pell Grant')) )
# show me the money
(x10MedianIncomePlot = mapPlot + geom_map(map = us, aes(fill = x10.Earnings.mean), color = "black") +
expand_limits(x = us$long, y = us$lat) +
coord_map() + ggtitle("Average Earnings 10 Yrs") + scale_fill_gradient(low='white', high='darkblue', name="Legend") +
xlab(label = '') + ylab(label = ''))
(expPlot = mapPlot + geom_map(map = us, aes(fill = ration), color = "black") +
expand_limits(x = us$long, y = us$lat) +
coord_map() + ggtitle("College Dept") + scale_fill_gradient(low='white', high='darkblue', name="Legend") +
xlab(label = '') + ylab(label = ''))
# box plots, and outliers, and quartiles, oh my!
(debtPlotBox = ggplot(box.data.melt, aes(ownership, value, fill=variable)) + geom_boxplot() +
ggtitle("Average Earnings") + scale_fill_manual(values=c("#999999", "#E69F00"), name="Legend", labels=c('6 Years','10 Years')) +
xlab(label = '') + ylab(label = 'Income') )
# what do you mean the school matters?
(EarningsPlot = ggplot(earningsMelt, aes(Ownership, value, fill=variable)) + geom_bar(stat = 'identity', position = 'dodge') +
ggtitle("Earnings After College") + xlab(label = '') + ylab(label = 'Income') +
scale_fill_manual(values=c("#999999", "#E69F00"), name="Legend", labels=c('After 6 Years','After 10 Years')))
# change is good
plotTable(fin.data[,-5])
View(Fin.Filtered)
View(Financial)
draw_confusion_matrix(nb.matrix1, 'Private nonprofit', 'Public', 'Naive Bayes')
draw_confusion_matrix(svm.matrix1, 'Private nonprofit', 'Public', 'Support Vector Machines')
nb.table
nb.matrix
?confusion
?confusionMatrix
nb.matrix1
svm.matrix1
rf.matrix
svm.matrix1
draw_confusion_matrix(rf.matrix, 'Private nonprofit', 'Public', 'Random Forest')
rf.matrix
