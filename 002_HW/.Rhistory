resultList = list()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[count] = result$p.value
count = count+1
}
}
}
resultList
View(resultList)
count = 1
resultList = list()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(i, j, sep = '_')] = result$p.value
count = count+1
}
}
}
resultList
hypoTest
count = 1
resultList = list()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
}
}
}
resultList
results_01 = as.data.frame(resultList)
results_01
View(result)
View(results_01)
resultTest = data.frame()
count = 1
resultList = list()
resultTest = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
resultTest = rbind(paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value)
}
}
}
resultTest
count = 1
resultList = list()
resultTest = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
resultTest = rbind(resultTest, paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value)
}
}
}
resultTest
count = 1
resultList = list()
resultTest = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = rbind(resultTest, paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value)
resultTest =  rbind(resultTest, results)
}
}
}
resultTest
resultList = list()
resultTest = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = rbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value)
resultTest =  rbind(resultTest, results)
}
}
}
resultTest
count = 1
resultList = list()
resultTest = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value)
resultTest =  rbind(resultTest, results)
}
}
}
resultTest
count = 1
resultList = list()
resultTest = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value, result$p.value < 0.05)
resultTest =  rbind(resultTest, results)
}
}
}
resultTest
AB = twoSample(1,0, hypoTest[1,2], hypoTest[1,3], hypoTest[2,2], hypoTest[2,3])
AB$p.value < 0.05 # reject null - school is making a difference
count = 1
resultList = list()
resultDF = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), result$p.value, result$p.value < 0.05)
resultDF =  rbind(resultTest, results)
}
}
}
resultDF
colnames(resultDF) = c("Schools", "Pvalue", "RejectNull")
resultDF
count = 1
resultList = list()
resultDF = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), signif(result$p.value, digits = 3), result$p.value < 0.05)
resultDF =  rbind(resultTest, results)
}
}
}
colnames(resultDF) = c("Schools", "Pvalue", "RejectNull")
resultDF
count = 1
resultList = list()
resultDF = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), signif(result$p.value, digits = 5), result$p.value < 0.05)
resultDF =  rbind(resultTest, results)
}
}
}
colnames(resultDF) = c("Schools", "Pvalue", "RejectNull")
resultDF
resultDF
GreatSchool = resultDF[RejectNull == TRUE, ]
GreatSchool = resultDF[resultDF$RejectNull == TRUE, ]
GreatSchool
GreatSchool = GreatSchool[c(-1,-5,-6),]
GreatSchool
GreatSchool
grid.table(GreatSchool)
# librarys
library(tidyr)
library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
grid.table(GreatSchool)
AtL = ggplot(hypoTest,aes(School[hypoTest$School == A], PerAtLvl)) + geom_bar(stat = 'identity', fill = colorPalette) + ggtitle("At Level Students") + coord_cartesian(ylim = c(0, 1))
AtL
BSchool = hypoTest[hypoTest$School == 'B', ]
BSchool
AtL = ggplot(BSchool,aes(School, PerAtLvl)) + geom_bar(stat = 'identity', fill = colorPalette) + ggtitle("At Level Students") + coord_cartesian(ylim = c(0, 1))
AtR = ggplot(BSchool,aes(School, PerAtRisk)) + geom_bar(stat = 'identity', fill = colorPalette) + ggtitle("At Risk Students") + coord_cartesian(ylim = c(0, 1))
grid.arrange(AtL, AtR, ncol = 2)
AtL
AtL = ggplot(BSchool,aes(School, PerAtLvl)) + geom_bar(stat = 'identity', fill = 'Blue') + ggtitle("At Level Students") + coord_cartesian(ylim = c(0, 1))
AtL
AtL = ggplot(BSchool,aes(PerAtRisk, PerAtLvl)) + geom_bar(stat = 'identity', fill = 'Blue')
AtL
AtL = ggplot(BSchool,aes(PerAtRisk, PerAtLvl)) + geom_bar(stat = 'stack', fill = 'Blue') + ggtitle("At Level Students") + coord_cartesian(ylim = c(0, 1))
AtL = ggplot(BSchool,aes(PerAtRisk, PerAtLvl)) + geom_bar(stat = 'identity', fill = 'Blue') + ggtitle("At Level Students") + coord_cartesian(ylim = c(0, 1))
AtL
ggplot(schools, aes(Middling)) + geom_density(kernel = 'gaussian')
ggplot(schools, aes(Middling)) + geom_bar()
ggplot(schools, aes(Middling)) + geom_bar(fill = 'blue')
ggplot(schools, aes(Behind)) + geom_bar(fill = 'blue')
ggplot(schools, aes(Middling)) + geom_dotplot()
schools
ggplot(schools, aes(Behind)) + geom_dotplot()
GreatSchool
hypoTestSec
hypoTest
#SQL
hypoTest
D = hypoTest[1,3]
U = hypoTest[1,2] + hypoTest[1,3]
DU = D*U
bySchools
D = hypoTest[1,3] - bySchools[1, 7]
U = hypoTest[1,2] + hypoTest[1,3]
DU = D*U
hypoTest
A = hypoTest[1,3]
defectRate = A/DU
DPO = A/DU
SQL = DPO*1000000
SQL
D = hypoTest[1,3]
U = hypoTest[1,2] + hypoTest[1,3]
DU = D*U
A = hypoTest[1,3]
DPO = A/DU
SQL = DPO*1000000
SQL
hypoTest
D = hypoTest[1,2] + hypoTest[1,3]
U = hypoTest[1,2] + hypoTest[1,3]
DU = D*U
A = hypoTest[1,3]
DPO = A/DU
SQL = DPO*1000000
SQL
D
U
DU
hypoTest[1,3]
20/300
.066* 1000000
DPO
6.7 * 1 000 000
6.7 * 1000000
D = hypoTest[1,2] + hypoTest[1,3]
U = hypoTest[1,2] + hypoTest[1,3]
DU = D*U
A = hypoTest[1,3]
DPO = A/DU
SQL = DPO*1000000
SQL
hypoTest
3*933
677/933
.72*1000000
D = 1
U = hypoTest[1,2] + hypoTest[1,3]
DU = D*U
A = hypoTest[1,3]
DPO = A/DU
SQL = DPO*1000000
SQL
for (i in 1:nrow(hypoTest)) {
print(i)
}
sqlLvl = c()
sqlLvl = c()
for (i in 1:nrow(hypoTest)) {
print(i)
sqlLvl =  c(sqlLvl, (hypoTest[i,3]/(1*hypoTest[i,2] + hypoTest[i,3]) ) *1000000 )
}
sqlLvl
sqlVal = c()
for (i in 1:nrow(hypoTest)) {
print(i)
sqlVal =  c(sqlLvl, (hypoTest[i,3]/(1*hypoTest[i,2] + hypoTest[i,3]) ) *1000000 )
}
sqlVal
sqlVal = c()
for (i in 1:nrow(hypoTest)) {
print(i)
sqlVal =  c(sqlLvl, (hypoTest[i,3]/(1*hypoTest[i,2] + hypoTest[i,3]) ) *1000000 )
}
for (i in 1:nrow(hypoTest)) {
print(i)
sqlVal =  c(sqlLvl, (hypoTest[i,3]/(1*hypoTest[i,2] + hypoTest[i,3]) ) *1000000 )
print(sqlVal)
}
sqlVal = c()
for (i in 1:nrow(hypoTest)) {
print(i)
sqlVal =  c(sqlLvl, (hypoTest[i,3]/(1*hypoTest[i,2] + hypoTest[i,3]) ) *1000000 )
print(sqlVal)
}
sqlVal = c()
sqlVal
print(i)
#SQL
hypoTest
sqlVal = c()
for (i in 1:nrow(hypoTest)) {
print(i)
sqlVal =  c(sqlVal, (hypoTest[i,3]/(1*hypoTest[i,2] + hypoTest[i,3]) ) *1000000 )
print(sqlVal)
}
sqlVal
sqlLvl = c(0.9, 1.4, 1.1, 0.9, 1.1 )
hypoTest
SQL = data.frame(School = hypoTest$School, sqlVal, sqlLvl)
SQL
Yield = c(28,46,35,28,35)
SQL = data.frame(School = hypoTest$School, sqlVal, sqlLvl, Yield)
SQL
hypoTestSec
# lets look at sections just for s&g
sqlValSec = c()
for (i in 1:nrow(hypoTestSec)) {
sqlValSec =  c(sqlValSec, (hypoTestSec[i,3]/(1*hypoTestSec[i,2] + hypoTestSec[i,3]) ) *1000000 )
}
sqlValSec
min(sqlValSec)
hypoTestSec[which(min(sqlValSec)),]
which(min(sqlValSec))
min(sqlValSec)
?which
hypoTestSec[23,]
which.min(sqlValSec)
hypoTestSec[which.min(sqlValSec),] # B7 is best section
hypoTestSec
hypoTest
hypoTest[i,2]
SQL
grid.table(SQL)
library(tidyr)
library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
grid.table(SQL)
sqlValSec
scaledSchool
# librarys
library(tidyr)
library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
hypoTest
summary(hypoTestSec)
schools
schools$School == 'A'
nrow(schools$School == 'A')
nrow(schools[schools$School == 'A',])
a = nrow(schools[schools$School == 'A',])
b = nrow(schools[schools$School == 'B',])
c = nrow(schools[schools$School == 'C',])
d = nrow(schools[schools$School == 'D',])
e = nrow(schools[schools$School == 'E',])
SecCount = data.frame(Sections = c(a,b,c,d,e), School = as.factor(schools$School))
View(SecCount)
School = as.factor(bySchools$School)
SecCount = data.frame(Sections = c(a,b,c,d,e), School = as.factor(schools$School))
View(SecCount)
bySchools$School
Sections
a = nrow(schools[schools$School == 'A',])
b = nrow(schools[schools$School == 'B',])
c = nrow(schools[schools$School == 'C',])
d = nrow(schools[schools$School == 'D',])
e = nrow(schools[schools$School == 'E',])
SecCount = data.frame(Sections = c(a,b,c,d,e), School = as.factor(schools$School))
View(SecCount)
Sections = c(a,b,c,d,e)
School = as.factor(bySchools$School)
Sections
School
SecCount = data.frame(cbind(Sections, School))
SecCount
SecCount$School = as.factor(bySchools$School)
SecCount
SecCount = data.frame(cbind(School,Sections))
SecCount$School = as.factor(bySchools$School)
SecCount
grid.table(SecCount)
library(tidyr)
library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
grid.table(SecCount)
plot(schools$Middling, schools$Behind)
plot(schools$Middling, schools$MoreBehind)
plot(schools$Middling, schools$VeryBehind)
plot(schools$Middling, schools$Completed)
ggplot(schools, aes(Middling, Behind)) + geom_point()
ggplot(schools, aes(Middling, Behind)) + geom_point(color = VeryBehind)
ggplot(schools, aes(Middling, Behind)) + geom_point(color = School)
ggplot(schools, aes(Middling, Behind)) + geom_point()
grid.arrange(Z, X, Y, W, ncol = 2)
Z = ggplot(schools, aes(Middling, Behind)) + geom_point()
X = ggplot(schools, aes(Middling, MoreBehind)) + geom_point()
Y = ggplot(schools, aes(Middling, VeryBehind)) + geom_point()
W = ggplot(schools, aes(Middling, Completed)) + geom_point()
grid.arrange(Z, X, Y, W, ncol = 2)
Z = ggplot(scaledSchool, aes(Middling, Behind)) + geom_point()
X = ggplot(scaledSchool, aes(Middling, MoreBehind)) + geom_point()
Y = ggplot(scaledSchool, aes(Middling, VeryBehind)) + geom_point()
W = ggplot(scaledSchool, aes(Middling, Completed)) + geom_point()
grid.arrange(Z, X, Y, W, ncol = 2)
hypoTestSec
sqlValSec
SecSQL = cbind(hypoTestSec$Section, sqlValSec)
SecSQL
SecSQL = data.frame(hypoTestSec$Section, sqlValSec)
SecSQL
SecSQL[sqlValSec < 500000,]
library(tidyr)
library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
dev.off(dev.list()["RStudioGD"]) # clear plots
hypoTest
GreatSchool
grid.table(hypoTest[,-1])
grid.table(hypoTest[,-4])
grid.table(hypoTest[,-4])
SQL
P = data.frame(hypoTest[,-4],sqlLvl[,-1])
sqlLvl[,-1]
sqlLvl
P = data.frame(hypoTest[,-4],SQL[,-1])
P
grid.table(data.frame(hypoTest[,-4],SQL[,-1]))
hypoTest
hypoTestSec
hypoTest = hypoTestSec
count = 1
resultList = list()
resultDF = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), signif(result$p.value, digits = 5), result$p.value < 0.05)
resultDF =  rbind(resultTest, results)
}
}
}
colnames(resultDF) = c("Schools", "Pvalue", "RejectNull")
resultDF
hypoTest
resultDF
hypoTest[i,1]
hypoTest = hypoTestSec
count = 1
resultList = list()
resultDF = data.frame()
for (i in 1:nrow(hypoTest)){
for(j in 1:nrow(hypoTest)){
if(i != j){
result =  twoSample(1,0, hypoTest[i,2], hypoTest[i,3],hypoTest[j,2], hypoTest[j,3])
resultList[paste(hypoTest[i,1], hypoTest[j,1], sep = '_')] = result$p.value
count = count+1
results = cbind( paste(hypoTest[i,1], hypoTest[j,1], sep = '_'), signif(result$p.value, digits = 5), result$p.value < 0.05)
resultDF =  rbind(resultTest, results)
}
}
}
colnames(resultDF) = c("Schools", "Pvalue", "RejectNull")
resultDF
hypoTest
hypoTest = data.frame(School = bySchools$School, AtLvl, AtRisk)
str(hypoTest)
hypoTest$PerAtLvl = hypoTest$AtLvl/(hypoTest$AtLvl+hypoTest$AtRisk) # most of the schools kids are behind
hypoTest$PerAtRisk = hypoTest$AtRisk/(hypoTest$AtLvl+hypoTest$AtRisk) # most of the schools kids are behind
hypoTest
hypoTest = data.frame(School = bySchools$School, AtLvl, AtRisk)
hypoTest
bySchools.Per
grid.table(bySchools.Per)
# librarys
library(tidyr)
library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
grid.table(bySchools)
grid.table(bySchools.Per)
