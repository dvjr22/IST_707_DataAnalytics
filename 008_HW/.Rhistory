(conmat.naive.lie = confusionMatrix(model_naive.lie.table))
#plot
grid.table(conmat.naive.lie)
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F)
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F)
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
deception.L = deception.L[sample(nrow(deception.L)), ] # randomize
model.data.1 = testingSample(deception.L[,-1])
lie.data.trng = model.data.1[[1]]
lie.data.test = model.data.1[[2]]
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F)
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
deception.L = deception.L[sample(nrow(deception.L)), ] # randomize
model.data.1 = testingSample(deception.L[,-1])
lie.data.trng = model.data.1[[1]]
lie.data.test = model.data.1[[2]]
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F)
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = .5, kernel = 'polynomial')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
?svm
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = .5, kernel = 'polynomial', type = 'C')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = .5,
# kernel = 'polynomial',
# kernel = 'linear',
kernel = 'radial',
# kernel = 'sigmoid',
type = 'C')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = .5,
# kernel = 'polynomial',
# kernel = 'linear',
# kernel = 'radial',
kernel = 'sigmoid',
type = 'C')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = .5,
# kernel = 'polynomial',
# kernel = 'linear',
# kernel = 'radial',
kernel = 'sigmoid')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
#plot
grid.table(conmat.svm.lie)
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = .5,
kernel = 'polynomial',
# kernel = 'linear',
# kernel = 'radial',
# kernel = 'sigmoid',
type = 'C')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
model_svm.lie = svm(lie ~., data = lie.data.trng, scale = F, cost = 1,
kernel = 'polynomial',
# kernel = 'linear',
# kernel = 'radial',
# kernel = 'sigmoid',
type = 'C')
summary(model_svm.lie)
pred_svm.lie = predict(model_svm.lie, lie.data.test[,-1], type = 'class')
model_svm.lie.table = table(pred_svm.lie, lie.data.test$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table))
deception.S = deception.S[sample(nrow(deception.S)), ] # randomize
model.data.2 = testingSample(deception.S[,-1])
lie.data.trng.2 = model.data.2[[1]]
lie.data.test.2 = model.data.2[[2]]
model_naive.sent = naiveBayes(lie.data.trng.2$sentiment ~. , data = lie.data.trng.2, laplace = 1, na.action = na.pass)
summary(model_naive.sent)
pred_naive.sent = predict(model_naive.sent, lie.data.test.2[,-1], type = 'class')
model_naive.sent.table = table(pred_naive.sent,lie.data.test.2$sentiment)
(conmat.naive.sent = confusionMatrix(model_naive.sent.table))
model_svm.sent = svm(sentiment ~., data = lie.data.trng.2, scale = F)
summary(model_svm.sent)
pred_svm.sent = predict(model_svm.sent, lie.data.test.2[,-1], type = 'class')
model_svm.sent.table = table(pred_svm.sent, lie.data.test.2$sentiment)
(conmat.svm.sent = confusionMatrix(model_svm.sent.table))
deception.S = deception.S[sample(nrow(deception.S)), ] # randomize
model.data.2 = testingSample(deception.S[,-1])
lie.data.trng.2 = model.data.2[[1]]
lie.data.test.2 = model.data.2[[2]]
model_svm.sent = svm(sentiment ~., data = lie.data.trng.2, scale = F)
summary(model_svm.sent)
pred_svm.sent = predict(model_svm.sent, lie.data.test.2[,-1], type = 'class')
model_svm.sent.table = table(pred_svm.sent, lie.data.test.2$sentiment)
deception.S = deception.S[sample(nrow(deception.S)), ] # randomize
model.data.2 = testingSample(deception.S[,-1])
lie.data.trng.2 = model.data.2[[1]]
lie.data.test.2 = model.data.2[[2]]
model_svm.sent = svm(sentiment ~., data = lie.data.trng.2, scale = F)
summary(model_svm.sent)
pred_svm.sent = predict(model_svm.sent, lie.data.test.2[,-1], type = 'class')
model_svm.sent.table = table(pred_svm.sent, lie.data.test.2$sentiment)
(conmat.svm.sent = confusionMatrix(model_svm.sent.table))
# P1.TSL.L = P1.TSL[,-3] # return to original
P1.TSL.L = P1.TSL.L[sample(nrow(P1.TSL.L)), ] # randomize
model.data.p1 = testingSample(P1.TSL.L[,-1])
lie.data.trng.p1 = model.data.p1[[1]]
lie.data.test.p1 = model.data.p1[[2]]
lie.p1.mod = naiveBayes(lie.data.trng.p1$lie ~. , data = lie.data.trng.p1, laplace = 1, na.action = na.pass)
summary(lie.p1.mod)
lie.p1.pred = predict(lie.p1.mod, lie.data.test.p1[,-1], type = 'class')
lt1 = table(lie.p1.pred, lie.data.test.p1$lie)
(conmat.lie.p1 = confusionMatrix(lt1))
P1.TSL.L = P2.TSL.L # run model with longer df
P1.TSL.L = P2.TSL.L # run model with longer df
P2.TSL.L = P2.TSL[,-3]
P2 = plot.df.2
P2$title = titles
P2$lie = deception.df[,1]
P2$sentiment = deception.df[,2]
P2$reviewLength = reviewLength
P2.TSL = P2[,c(122:125,1:121)]
P2.TSL.L = P2.TSL[,-3]
P2.TSL.S = P2.TSL[,-2]
P1.TSL.L = P2.TSL.L # run model with longer df
# P1.TSL.L = P1.TSL[,-3] # return to original
P1.TSL.L = P1.TSL.L[sample(nrow(P1.TSL.L)), ] # randomize
model.data.p1 = testingSample(P1.TSL.L[,-1])
lie.data.trng.p1 = model.data.p1[[1]]
lie.data.test.p1 = model.data.p1[[2]]
lie.p1.mod = naiveBayes(lie.data.trng.p1$lie ~. , data = lie.data.trng.p1, laplace = 1, na.action = na.pass)
summary(lie.p1.mod)
lie.p1.pred = predict(lie.p1.mod, lie.data.test.p1[,-1], type = 'class')
lt1 = table(lie.p1.pred, lie.data.test.p1$lie)
(conmat.lie.p1 = confusionMatrix(lt1))
P1.TSL.L = P1.TSL[,-3] # return to original
# P1.TSL.L = P1.TSL[,-3] # return to original
P1.TSL.L = P1.TSL.L[sample(nrow(P1.TSL.L)), ] # randomize
model.data.p1 = testingSample(P1.TSL.L[,-1])
lie.data.trng.p1 = model.data.p1[[1]]
lie.data.test.p1 = model.data.p1[[2]]
model_svm.lie.p1 = svm(lie ~., data = lie.data.trng.p1, scale = F)
summary(model_svm.lie.p1)
pred_svm.lie.p1 = predict(model_svm.lie.p1, lie.data.test.p1[,-1], type = 'class')
model_svm.lie.table.p1 = table(pred_svm.lie.p1, lie.data.test.p1$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table.p1))
P1.TSL.L = P2.TSL.L # run model with longer df
# P1.TSL.L = P1.TSL[,-3] # return to original
P1.TSL.L = P1.TSL.L[sample(nrow(P1.TSL.L)), ] # randomize
model.data.p1 = testingSample(P1.TSL.L[,-1])
lie.data.trng.p1 = model.data.p1[[1]]
lie.data.test.p1 = model.data.p1[[2]]
model_svm.lie.p1 = svm(lie ~., data = lie.data.trng.p1, scale = F)
summary(model_svm.lie.p1)
pred_svm.lie.p1 = predict(model_svm.lie.p1, lie.data.test.p1[,-1], type = 'class')
model_svm.lie.table.p1 = table(pred_svm.lie.p1, lie.data.test.p1$lie)
(conmat.svm.lie = confusionMatrix(model_svm.lie.table.p1))
# P1.TSL.S = P1.TSL.S[,-2] # return to original
P1.TSL.S = P1.TSL.S[sample(nrow(P1.TSL.S)), ] # randomize
model.data.p2 = testingSample(P1.TSL.S[,-1])
lie.data.trng.p2 = model.data.2[[1]]
lie.data.test.p2 = model.data.2[[2]]
model_naive.sentp = naiveBayes(lie.data.trng.2$sentiment ~. , data = lie.data.trng.p2, laplace = 1, na.action = na.pass)
summary(model_naive.sentp)
pred_naive.sentp = predict(model_naive.sentp, lie.data.test.p2[,-1], type = 'class')
model_naive.sent.tablep = table(pred_naive.sentp,lie.data.test.p2$sentiment)
(conmat.naive.sentp = confusionMatrix(model_naive.sent.tablep))
model_svm.sentp = svm(sentiment ~., data = lie.data.trng.p2, scale = F)
summary(model_svm.sent)
pred_svm.sentp = predict(model_svm.sentp, lie.data.test.p2[,-1], type = 'class')
model_svm.sent.tablep = table(pred_svm.sentp, lie.data.test.p2$sentiment)
(conmat.svm.sent = confusionMatrix(model_svm.sent.tablep))
P1.TSL.S = P2.TSL.S # run model with longer df
# P1.TSL.S = P1.TSL.S[,-2] # return to original
P1.TSL.S = P1.TSL.S[sample(nrow(P1.TSL.S)), ] # randomize
model.data.p2 = testingSample(P1.TSL.S[,-1])
lie.data.trng.p2 = model.data.2[[1]]
lie.data.test.p2 = model.data.2[[2]]
# P1.TSL.S = P1.TSL.S[,-2] # return to original
P1.TSL.S = P1.TSL.S[sample(nrow(P1.TSL.S)), ] # randomize
model.data.p2 = testingSample(P1.TSL.S[,-1])
lie.data.trng.p2 = model.data.2[[1]]
lie.data.test.p2 = model.data.2[[2]]
P1.TSL.S = P2.TSL.S # run model with longer df
P1.TSL.S = P1.TSL.S[,-2]
P1.TSL.S = P1.TSL[,-2]
P1.TSL.S = P2.TSL.S # run model with longer df
# P1.TSL.S = P1.TSL[,-2] # return to original
P1.TSL.S = P1.TSL.S[sample(nrow(P1.TSL.S)), ] # randomize
lie.data.trng.p2 = model.data.p2[[1]]
lie.data.test.p2 = model.data.p2[[2]]
P1.TSL.S = P1.TSL[,-2]
# P1.TSL.S = P1.TSL[,-2] # return to original
P1.TSL.S = P1.TSL.S[sample(nrow(P1.TSL.S)), ] # randomize
model.data.p2 = testingSample(P1.TSL.S[,-1])
lie.data.trng.p2 = model.data.p2[[1]]
lie.data.test.p2 = model.data.p2[[2]]
model_naive.sentp = naiveBayes(lie.data.trng.2$sentiment ~. , data = lie.data.trng.p2, laplace = 1, na.action = na.pass)
summary(model_naive.sentp)
pred_naive.sentp = predict(model_naive.sentp, lie.data.test.p2[,-1], type = 'class')
model_naive.sent.tablep = table(pred_naive.sentp,lie.data.test.p2$sentiment)
(conmat.naive.sentp = confusionMatrix(model_naive.sent.tablep))
model_svm.sentp = svm(sentiment ~., data = lie.data.trng.p2, scale = F)
summary(model_svm.sent)
pred_svm.sentp = predict(model_svm.sentp, lie.data.test.p2[,-1], type = 'class')
model_svm.sent.tablep = table(pred_svm.sentp, lie.data.test.p2$sentiment)
(conmat.svm.sent = confusionMatrix(model_svm.sent.tablep))
(conmat.naive.sentp = confusionMatrix(model_naive.sent.tablep))
P1.TSL.S = P2.TSL.S # run model with longer df
# P1.TSL.S = P1.TSL[,-2] # return to original
P1.TSL.S = P1.TSL.S[sample(nrow(P1.TSL.S)), ] # randomize
model.data.p2 = testingSample(P1.TSL.S[,-1])
lie.data.trng.p2 = model.data.p2[[1]]
lie.data.test.p2 = model.data.p2[[2]]
model_naive.sentp = naiveBayes(lie.data.trng.2$sentiment ~. , data = lie.data.trng.p2, laplace = 1, na.action = na.pass)
summary(model_naive.sentp)
pred_naive.sentp = predict(model_naive.sentp, lie.data.test.p2[,-1], type = 'class')
model_naive.sent.tablep = table(pred_naive.sentp,lie.data.test.p2$sentiment)
(conmat.naive.sentp = confusionMatrix(model_naive.sent.tablep))
model_svm.sentp = svm(sentiment ~., data = lie.data.trng.p2, scale = F)
summary(model_svm.sent)
pred_svm.sentp = predict(model_svm.sentp, lie.data.test.p2[,-1], type = 'class')
model_svm.sent.tablep = table(pred_svm.sentp, lie.data.test.p2$sentiment)
(conmat.svm.sent = confusionMatrix(model_svm.sent.tablep))
fourfoldplot(model_naive.lie.table, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
draw_confusion_matrix <- function(cm) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, 'Class1', cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, 'Class2', cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, 'Class1', cex=1.2, srt=90)
text(140, 335, 'Class2', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix(model_naive.lie.table)
draw_confusion_matrix(conmat.naive.lie)
draw_confusion_matrix <- function(cm, class1, class2) {
draw_confusion_matrix <- function(cm, class1, class2) {
;
}
draw_confusion_matrix <- function(cm, class1, class2) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, class1, cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, class2, cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, class1, cex=1.2, srt=90)
text(140, 335, class2', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix <- function(cm, class1, class2) {
draw_confusion_matrix <- function(cm, class1, class2) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, class1, cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, class2, cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, class1, cex=1.2, srt=90)
text(140, 335, class2', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix <- function(cm, class1, class2) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, class1, cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, class2, cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, class1, cex=1.2, srt=90)
text(140, 335, class2', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix <- function(cm, class1, class2) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, class1, cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, class2, cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, class1, cex=1.2, srt=90)
text(140, 335, class2, cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
conmat.naive.lie
draw_confusion_matrix(conmat.naive.lie, 'False', 'True')
# stolen from:
# https://stackoverflow.com/questions/23891140/r-how-to-visualize-confusion-matrix-using-the-caret-package/42940553
# slight modification by Diego Valdes
draw_confusion_matrix <- function(cm, class1, class2, title) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title(title, cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, class1, cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, class2, cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, class1, cex=1.2, srt=90)
text(140, 335, class2, cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
draw_confusion_matrix(conmat.naive.lie, 'False', 'True', 'Naive Bayes Set 1')
draw_confusion_matrix(conmat.naive.sent, 'False', 'True', 'Naive Bayes Set 1 Sentiment')
conmat.naive.sent
conmat.naive.sentp
conmat.svm.sent
model_svm.sent = svm(sentiment ~., data = lie.data.trng.2, scale = F)
summary(model_svm.sent)
pred_svm.sent = predict(model_svm.sent, lie.data.test.2[,-1], type = 'class')
model_svm.sent.table = table(pred_svm.sent, lie.data.test.2$sentiment)
(conmat.svm.sent = confusionMatrix(model_svm.sent.table))
conmat.svm.sent
draw_confusion_matrix(conmat.naive.lie, 'False', 'True', 'Naive Bayes Set 1 Lie')
draw_confusion_matrix(conmat.svm.lie, 'False', 'True', 'SVM Set 1 Lie')
draw_confusion_matrix(conmat.naive.sent, 'Negative', 'Positive', 'Naive Bayes Set 1 Sentiment')
draw_confusion_matrix(conmat.svm.sent, 'Negative', 'Positive', 'SVM Set 1 Sentiment')
