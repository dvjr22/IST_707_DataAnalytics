imp_words = rownames(impWords)
imp_words = rowvar[order(impWords[,1], decreasing = T)]
# make predictions
results = predict(Model.RF, FED_TEST[ ,  -1])
results
baseAcc = mean(results==FED_TEST)
baseAcc = mean(results==FED_TEST[,1])
baseAcc
# =============================================================================================================
#' create tree models
treeThis = function(DF_FED) {
FED_DISPT = DF_FED[DF_FED[,1]=='dispt',] # disputed authorship
FED_AUTH = DF_FED[DF_FED[,1]!='dispt',] # known authorship
#reset factors and check
FED_AUTH[,1] = factor(FED_AUTH[,1])
#levels(FED_AUTH$essay_writer)
#str(FED_AUTH$essay_writer)
FED_TREE = FED_AUTH[sample(nrow(FED_AUTH)),] # randomize dataset
FED_TRNG = FED_TREE[1:ceiling(nrow(FED_TREE)*.7),] # 70% trng data
FED_TEST = FED_TREE[(ceiling(nrow(FED_TREE)*.7)+1):nrow(FED_TREE),] # 30% test data
Model.RF = randomForest(FED_TRNG[,-1], FED_TRNG[,1])
summary(Model.RF)
impWords = data.frame(round(importance(Model.RF), 2)) # importance of variables, high is better
imp_words = rownames(impWords)
imp_words = rowvar[order(impWords[,1], decreasing = T)]
# make predictions
results = predict(Model.RF, FED_TEST[ ,  -1])
baseAcc = mean(results==FED_TEST[,1])
# look at results w/ confusion matrix
table(results)
table(FED_TEST[,1])
(matrix = table(results, FED_TEST[,1]))
matrixStats = confusionMatrix(matrix)
results.disput = predict(Model.RF, FED_DISPT[,-1])
theList = list(Model.RF,impWords,imp_words,results,matrix,matrixStats, results.disput,baseAcc)
}
fed_v1_results = treeThis(FED_V1)
fed_v2_results = treeThis(FED_V2)
fed_v3_results = treeThis(FED_V3)
fed_v1_results[1] # RF model  13.46%
fed_v1_results[2] # importance
fed_v1_results[[3]][1:5] # important words
fed_v1_results[4] # test prediction
fed_v1_results[5] # confustion matrix
fed_v1_results[6] # matrix stats Accuracy : 91% | 95% CI : (0.7084, 0.9888) Kappa : 0.7634
fed_v1_results[5] # confustion matrix
fed_v1_results[6] # matrix stats Accuracy : 91% | 95% CI : (0.7084, 0.9888) Kappa : 0.7634
fed_v1_results[7] # disputed prediction
fed_v1_results[8]
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218)
fed_v2_results[1] # RF model 9.62%
fed_v2_results[4] # test prediction
fed_v2_results[5] # confustion matrix
fed_v2_results[6] # matrix stats Accuracy : 91% | 95% CI : (0.7084, 0.9888) Kappa : 0.7778
fed_v2_results[6] # matrix stats Accuracy : 90% | 95% CI : (0.7084, 0.9888) Kappa : 0.7778
fed_v1_results[7] # disputed prediction
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218)
fed_v3_results[1] # RF model 7.69%
fed_v3_results[1] # RF model 7.69%
fed_v3_results[6] # matrix stats Accuracy : 0.8636 | 95% CI : (0.6509, 0.9709) Kappa : 0.7155
fed_v3_results[8]
IMP_WORDS = data.frame(fed_v1_results[[3]][1:5],fed_v2_results[[3]][1:5],fed_v3_results[[3]][1:5])
colnames(IMP_WORDS) = c("Model 1","Model 2","Model 3")
rownames(IMP_WORDS) = c(1,2,3,4,5)
grid.table(IMP_WORDS)
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v2_conmat = plotThemResults(fed_v2_results[5], "Confusion Matrix: Scale Max/Min")
plot_v3_conmat = plotThemResults(fed_v3_results[5], "Confusion Matrix: Stop Words")
Error = cbind("7.69%","11.54%%","13.46%")
Error = data.frame(Error)
colnames(Error) = c("Model 1","Model 2","Model 3")
grid.table(Error)
Predictions = data.frame(fed_data_og_v3[fed_data_og_v3$author=='dispt',2],fed_v1_results[7],fed_v2_results[7],fed_v3_results[7])
colnames(Predictions) = c("Essay","Model 1","Model 2","Model 3")
grid.table(Predictions)
fed_data_og_v3[fed_data_og_v3$author=='dispt',2]
plot(fed_v1_results[[1]],log='y', main = 'test', legend())
test = data.frame(FED_DISPT[,1],fed_v1_results[7])
loadLibraries()
library(ISLR)
library(MASS)
library(randomForest)
library(caret)
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/005_HW")
#'determine the cols where a word appears less than the desired frequency
#' @param   df data frame
#' @param   frequency percent want col to meet
#' wordPercentage()
wordPercentage = function(df, frequency){
count = 0
index = c()
for (c in 1:ncol(df)) {
colCount = 0
for (r in 1:nrow(df)) {
if(df[r,c] > 0) {
colCount=colCount+1
}
}
if(colCount/nrow(df) > frequency)
index = c(index,c)
}
return(index)
}
FedCorpus =  Corpus(DirSource("FedPapersCorpus")) # corpus, a collection of docs
getTransformations() # list of attributes that can be in the last
(ndocs = length(FedCorpus)) # 85 docs
##The following will show you that you read in all the documents
summary(FedCorpus)
# show metadata for each element in corpus
(meta(FedCorpus[[1]]))
(meta(FedCorpus[[1]],1))
(meta(FedCorpus[[85]]))
(meta(FedCorpus[[85]],5))
# stolen from Gates
# ignore extremely rare words i.e. terms that appear in less then 1% of the documents
(minTermFreq = ndocs * 0.0001)
# ignore overly common words i.e. terms that appear in more than 50% of the documents
(maxTermFreq = ndocs * 1)
# document term matrix
# some of the commented out stuff isn't working right
FedPapers_dtm <- DocumentTermMatrix(FedCorpus,
control = list(
stopwords = TRUE,
wordLengths=c(3, 15),
removePunctuation = T,
removeNumbers = T,
tolower=T,
stemming = T,
remove_separators = T,
#stopwords = MyStopwords,
#removeWords(STOPS),
#removeWords(MyStopwords),
#words = STOPS,
bounds = list(global = c(minTermFreq, maxTermFreq))
))
# create 2 ver of dtm, w/ and w/o stop words
FedPapers_dtm_stop = remove_stopwords(FedPapers_dtm, stopwords = stopwords('english') ) # remove stop words
# Have a look
#inspect(FedPapers_dtm)
DTM_mat = as.matrix(FedPapers_dtm) # matrix
DTM_mat[,3]
DTM_mat[1:13,1:5]
Fed_DF = as.data.frame(as.matrix(FedPapers_dtm))
(ncol(Fed_DF)) # 4900
Fed_DF_S = as.data.frame(as.matrix(FedPapers_dtm_stop))
Fed_DF = as.data.frame(as.matrix(FedPapers_dtm))
(ncol(Fed_DF)) # 4900
Fed_DF_S = as.data.frame(as.matrix(FedPapers_dtm_stop))
(ncol(Fed_DF_S)) # 4897
EssayLen = rowSums(Fed_DF) #essay length
cols_to_keep.50 = wordPercentage(Fed_DF, .5) #240
cols_to_keepS.50 = wordPercentage(Fed_DF_S, .5) #238 - lets move with them in
cols_to_keep.60 = wordPercentage(Fed_DF, .6) #163
cols_to_keep.65 = wordPercentage(Fed_DF, .65) #124
cols_to_keep.70 = wordPercentage(Fed_DF, .70) #106
cols_to_keep.75 = wordPercentage(Fed_DF, .75) #82
gw = cols_to_keep.75
newFed = Fed_DF[,gw] #105 variables
newFed$essayLen = EssayLen
# scale
newFed = data.frame(t(apply(Fed_DF, 1, function(i) round(i/sum(i),3))))
newFed = newFed[,gw]
#scale w/ max min
newFedV2 = scaleDFRow(Fed_DF, c(1:ncol(Fed_DF)))
newFedV2 = newFedV2[,gw]
essay_writer = gsub('_.*','',rownames(newFed))
newFed$essay_writer = essay_writer
newFedV2$essay_writer = essay_writer
newFed = newFed[,c(ncol(newFed),1:(ncol(newFed)-1))]
rownames(newFed) = c()
newFedV2 = newFedV2[,c(ncol(newFedV2),1:(ncol(newFedV2)-1))]
rownames(newFedV2) = c()
plots_v1
grid.arrange(plots_v1[2], plots_v2[2], plots_v3[2], nrow = 1)
grid.arrange(plots_v1[[2]], plots_v2[[2]], plots_v3[[2]], nrow = 1)
plots_v3 = plotThis(FED_V3, c("Author: Stop Words","Author: Function Words | Mean") )
grid.arrange(plots_v1[[2]], plots_v2[[2]], plots_v3[[2]], nrow = 1)
wordcloud(colnames(FED_V1[,-1]), as.matrix(colSums(FED_V1[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
par(mfrow=c(1,3))
wordcloud(colnames(FED_V1[,-1]), as.matrix(colSums(FED_V1[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(FED_V2[,-1]), as.matrix(colSums(FED_V2[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(FED_V3[,-1]), as.matrix(colSums(FED_V3[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(FED_V1[,-1]), as.matrix(colSums(FED_V1[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"),main="title")
par(mfrow=c(1,3))
wordcloud(colnames(FED_V1[,-1]), as.matrix(colSums(FED_V1[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(FED_V2[,-1]), as.matrix(colSums(FED_V2[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(FED_V3[,-1]), as.matrix(colSums(FED_V3[,-1]))*15, max.words = 100, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
grid.table(FED_V1[10:20,1:10])
dev.off(dev.list()["RStudioGD"])
grid.table(FED_V1[10:20,1:10])
grid.table(FED_V1[10:13,1:10])
grid.table(FED_V1[10:13,1:10])
grid.table(FED_V2[10:13,1:10])
grid.table(FED_V3[10:13,1:10])
grid.table(FED_V3[10:13,1:10])
grid.arrange(plots_v1[[2]], plots_v2[[2]], plots_v3[[2]], nrow = 1)
wordcloud(colnames(DF_FED), as.matrix(colSums(DF_FED))/10, max.words = 300, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
rownames(Fed_DF) = c()
DF_FED = Fed_DF[,cols_to_keep.50]
wordcloud(colnames(DF_FED), as.matrix(colSums(DF_FED))/10, max.words = 300, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(DF_FED), as.matrix(colSums(DF_FED))/10, max.words = 300, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(DF_FED), as.matrix(colSums(DF_FED))/10, max.words = 300, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
wordcloud(colnames(DF_FED), as.matrix(colSums(DF_FED))/10, max.words = 200, random.order = F, rot.per = .35,colors=brewer.pal(8, "Dark2"))
Error = c("7.69%","11.54%","13.46%")
TestACC = c('77%','91%','86%')
Kappa = c('0.57','0.78','0.58')
CI_95 = c('(0.5463, 0.9218)', '(0.7084, 0.9888)','(0.6509, 0.9709)')
StatDF = data.frame(Error,TestACC,Kappa)
rownames(StatDF) = c("Model 1","Model 2","Model 3")
grid.table(StatDF)
loadLibraries()
library(ISLR)
library(MASS)
library(randomForest)
library(caret)
grid.table(StatDF)
StatDF = data.frame(Error,TestACC,Kappa,CI_95)
rownames(StatDF) = c("Model 1","Model 2","Model 3")
grid.table(StatDF)
grid.arrange(plot_v1_conmat, plot_v2_conmat, plot_v3_conmat, nrow=1)
grid.table(StatDF)
rpart::rpart(FED_V1[,1]~. Fed_v2[,-1])
rpart::rpart(FED_V1[,1].~ Fed_v2[,-1])
rpart::rpart(FED_V1[,1]~., Fed_v2[,-1])
rpart::rpart(FED_TRNG[,1]~., FED_TRNG[,-1])
test = rpart::rpart(FED_TRNG[,1]~., FED_TRNG[,-1])
plot(test)
test$splits
grid.arrange(plot_v1_conmat, plot_v2_conmat, plot_v3_conmat, nrow=1)
grid.table(Predictions)
grid.table(Predictions)
grid.table(IMP_WORDS)
grid.table(Predictions)
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top')
#return(plotConMat_v1)
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_reverse()
#return(plotConMat_v1)
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(trans='reverse')
#return(plotConMat_v1)
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(limits = rev(levels(Actual)))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(limits = rev(levels(Actual)))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(limits = rev(Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(limits = rev(con_mat_v1$Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq))) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(limits = rev(con_mat_v1$Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plots_v1 = plotThis(FED_V1, c("Author: Scale Essay Length","Author: Scale Essay Length | Mean") )
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top')# + scale_y_discrete(limits = rev(con_mat_v1$Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%2.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top')# + scale_y_discrete(limits = rev(con_mat_v1$Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%2.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top') + scale_y_discrete(limits = rev(con_mat_v1$Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
nrow(FED_V1[FED_V1$essay_writer == 'HM'])
nrow(FED_V1[FED_V1$essay_writer == 'HM',])
nrow(FED_V1[FED_V1$essay_writer == 'HM' | FED_V1$essay_writer == 'Jay',])
test = FED_V1[FED_V1$essay_writer == 'HM' | FED_V1$essay_writer == 'Jay',]
testDF = FED_V1[FED_V1$essay_writer == 'HM' | FED_V1$essay_writer == 'Jay',]
testDf_v2 = FED_V1[FED_V1$essay_writer == 'Hamilton' | FED_V1$essay_writer == 'Madison',]
test_1 = treeThis(testDF)
testDF
test_1 = treeThis(testDF)
nrow(FED_V1[FED_V1$essay_writer == 'HM' | FED_V1$essay_writer == 'Jay'| FED_V1$essay_writer=='dispt',])
testDF = FED_V1[FED_V1$essay_writer == 'HM' | FED_V1$essay_writer == 'Jay'|FED_V1$essay_writer=='dispt',]
testDF = FED_V1[FED_V1$essay_writer == 'HM' | FED_V1$essay_writer == 'Jay'|FED_V1$essay_writer=='dispt',]
testDf_v2 = FED_V1[FED_V1$essay_writer == 'Hamilton' | FED_V1$essay_writer == 'Madison' |FED_V1$essay_writer=='dispt',]
test_1 = treeThis(testDF)
test_2 = treeThis(testDf_v2)
test_1[7]
test_1[1]
test_1[4]
test_1[5]
test_1[6]
test_2[1]
test_2[6]
test_1[6]
test_1 = treeThis(testDF)
test_1[1]
test_1[6]
test_1[6]
test_1 = treeThis(testDF)
test_1[1]
test_1[6]
test_2[1]
test_2[6]
fed_v1_results
View(fed_v1_results)
testDF
testDf_v2
View(testDF)
View(testDf_v2)
testdf_v3 = FED_V1[,59:74]
View(testdf_v3)
testdf_v3 = FED_V1[20:28,]
testdf_v3
View(testdf_v3)
testdf_v3 = FED_V1[30:38,]
View(testdf_v3)
testdf_v3 = FED_V1[40:48,]
testdf_v3 = FED_V1[40:48,]
View(testdf_v3)
testdf_v3 = FED_V1[50:58,]
View(testdf_v3)
testdf_v3 = FED_V1[60:67,]
testdf_v3 = FED_V1[60:67,]
View(testdf_v3)
testdf_v3 = testDf_v2[60:67,]
View(testdf_v3)
testdf_v3 = testDf_v2[59:66,]
View(testdf_v3)
balanced = data.frame(testDF,testdf_v3)
balanced = data.frame(rbind(testDF,testdf_v3))
View(balanced)
balanced_results = treeThis(balanced)
balanced_results[1]
balanced_results[6]
balanced_results = treeThis(balanced)
balanced_results[1]
balanced_results[6]
test_2[7]
balanced_results[1]
balanced_results[6]
View(FED_V1)
fed_v1_results = treeThis(FED_V1[,c(-2,-30)])
fed_v2_results = treeThis(FED_V2[,c(-2,-30)])
fed_v1_results[1] # RF model  7.69%
fed_v1_results[2] # importance
fed_v1_results[[3]][1:5] # important words
fed_v1_results[4] # test prediction
fed_v1_results[5] # confustion matrix
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218) Kappa : 0.5703
fed_v1_results[7] # disputed prediction
fed_v2_results[1] # RF model 11.54%
fed_v2_results[2] # importance
fed_v2_results[[3]][1:5] # important words
fed_v2_results[4] # test prediction
fed_v2_results[5] # confustion matrix
fed_v2_results[6] # matrix stats Accuracy : 91% | 95% CI : (0.7084, 0.9888) Kappa : 0.7843
fed_v2_results[7] # disputed prediction
fed_v3_results[1] # RF model 13.46%
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218) Kappa : 0.5703
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218) Kappa : 0.5703
fed_v2_results[6] # matrix stats Accuracy : 91% | 95% CI : (0.7084, 0.9888) Kappa : 0.7843
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218) Kappa : 0.5703
FED_V1[,c(-2,-30)]
fed_v1_results = treeThis(FED_V1[,c(-2,-30)])
fed_v1_results = treeThis(FED_V1[,c(-2,-30)])
fed_v2_results = treeThis(FED_V2[,c(-2,-30)])
fed_v1_results[1] # RF model  7.69%
fed_v1_results[6] # matrix stats Accuracy : 77% | 95% CI : (0.5463, 0.9218) Kappa : 0.3529
fed_v2_results[6] # matrix stats Accuracy : 91% | 95% CI : (0.4513, 0.8614) Kappa : 0.1149
fed_v1_results[1] # RF model  7.69%
fed_v2_results[1] # RF model 11.54%
Error = c("25%","25%","13.46%")
TestACC = c('86%','59%','86%')
Kappa = c('0.35','0.11','0.58')
CI_95 = c('(0.5463, 0.9218)', '(0.4513, 0.8614)','(0.6509, 0.9709)')
StatDF = data.frame(Error,TestACC,Kappa,CI_95)
rownames(StatDF) = c("Model 1","Model 2","Model 3")
grid.table(StatDF)
dev.off(dev.list()["RStudioGD"])
grid.table(StatDF)
Error = c("25%","25%","13%")
TestACC = c('86%','59%','86%')
Kappa = c('0.35','0.11','0.58')
CI_95 = c('(0.5463, 0.9218)', '(0.4513, 0.8614)','(0.6509, 0.9709)')
StatDF = data.frame(Error,TestACC,Kappa,CI_95)
rownames(StatDF) = c("Model 1","Model 2","Model 3")
grid.table(StatDF)
grid.table(StatDF)
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v2_conmat = plotThemResults(fed_v2_results[5], "Confusion Matrix: Scale Max/Min")
plot_v3_conmat = plotThemResults(fed_v3_results[5], "Confusion Matrix: Stop Words")
grid.arrange(plot_v1_conmat, plot_v2_conmat, plot_v3_conmat, nrow=1)
# =============================================================================================================
#' plot the confustion matrix
plotThemResults = function(CON_MATRIX, title){
con_mat_v1 = data.frame(CON_MATRIX)
colnames(con_mat_v1) = c("Results","Actual","Freq")
plotConMat_v1 = ggplot(con_mat_v1, aes(Results,Actual)) +  geom_tile(aes(fill=Freq), color='black') +
scale_fill_gradient(low = "white", high = "steelblue") + geom_text(aes(label = sprintf("%1.0f",Freq)), vjust = 1) +
ggtitle(title) + scale_x_discrete(position = 'top')# + scale_y_discrete(limits = rev(con_mat_v1$Actual))
#return(plotConMat_v1) scale_x_discrete(limits = rev(levels(the_factor)))
}
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v1_conmat
plot_v1_conmat = plotThemResults(fed_v1_results[5], "Confusion Matrix: Scale Essay Length" )
plot_v2_conmat = plotThemResults(fed_v2_results[5], "Confusion Matrix: Scale Max/Min")
plot_v3_conmat = plotThemResults(fed_v3_results[5], "Confusion Matrix: Stop Words")
grid.arrange(plot_v1_conmat, plot_v2_conmat, plot_v3_conmat, nrow=1)
IMP_WORDS = data.frame(fed_v1_results[[3]][1:5],fed_v2_results[[3]][1:5],fed_v3_results[[3]][1:5])
colnames(IMP_WORDS) = c("Model 1","Model 2","Model 3")
rownames(IMP_WORDS) = c(1,2,3,4,5)
grid.table(IMP_WORDS)
Predictions = data.frame(fed_data_og_v3[fed_data_og_v3$author=='dispt',2],fed_v1_results[7],fed_v2_results[7],fed_v3_results[7])
colnames(Predictions) = c("Essay","Model 1","Model 2","Model 3")
grid.table(Predictions)
fed_v1_results[7] # disputed prediction
Predictions = data.frame(fed_data_og_v3[fed_data_og_v3$author=='dispt',2],fed_v1_results[7],fed_v2_results[7],fed_v3_results[7])
colnames(Predictions) = c("Essay","Model 1","Model 2","Model 3")
grid.table(Predictions)
fed_v1_results[7]
dev.off(dev.list()["RStudioGD"])
Predictions = data.frame(fed_data_og_v3[fed_data_og_v3$author=='dispt',2],fed_v1_results[7],fed_v2_results[7],fed_v3_results[7])
Predictions
fed_v1_results[7]
Predictions = data.frame(fed_data_og_v3[fed_data_og_v3$author=='dispt',2],fed_v1_results[7],fed_v2_results[7],fed_v3_results[7])
colnames(Predictions) = c("Essay","Model 1","Model 2","Model 3")
grid.table(Predictions)
