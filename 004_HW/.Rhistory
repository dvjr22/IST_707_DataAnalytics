# IST 707
# Apr 14, 2019
# HW 3
# =============================================================================================================
# RESET WORKSPACE
# =============================================================================================================
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
# =============================================================================================================
# LIBRARIES
# =============================================================================================================
#library(tidyr)
#library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
#library(lattice)
library(arules)
library(arulesViz)
library(datasets)
originalWD = getwd() # get original wd for saving to .r file
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/003_HW")
# =============================================================================================================
# IMPORT AND CLEAN DATA
# =============================================================================================================
bankData_og = read.csv2("bankdata_csv_all.csv", sep = ',', stringsAsFactors = FALSE)
naInData(bankData_og)# no NA
bank_data = bankData_og[,-1] # remove id col
str(bank_data) # to factor: 2,3:11
colToFactor = c(2,3,5:11)
colToNum = c(4)
colNames = colnames(bank_data)
colNames
colNames[c(2,3,5:11)]
colNames[4]
bank_data = toFactor(bank_data, colToFactor) # change defined cols to factors
bank_data = toNumeric(bank_data, colToNum) # change defined cols to numeric
str(bank_data)
# adding cols for factorizing income and age
summary(bank_data$income)
bank_data$incomeF = cut(bank_data$income, breaks = c(0,10000,20000,30000,40000,50000,60000,Inf),
labels = c("ZERO","TEN K","TWENTY K","THIRTY K","FOURTY K","FIFTY K","SIXTY K"))
summary(bank_data$age)
bank_data$ageF = cut(bank_data$age, breaks = c(0,10,20,30,40,50,60,Inf),
labels = c("child","teens","twenties","thirties","fourties","fifties","sixties"))
# adding col for int of children
bank_data$childrenInt=as.integer(bank_data$children)
summary(bank_data)
str(bank_data)
summary(bank_data$income)
summary(bank_data[bank_data$sex=='FEMALE',]$income)
summary(bank_data[bank_data$sex=='MALE',]$income)
# =============================================================================================================
# TO EXPLORE STRANGE NEW DATASETS, TO SEEK OUT NEW ANSWERS TO OLD SOLUTIONS,
# TO BOLDY DISCOVER WHAT NO ONE HAS DISCOVERD BEFORE!
# =============================================================================================================
regionsPlot = ggplot(bank_data, aes(region)) + geom_bar(aes(fill = sex))+ scale_fill_manual( values = c('red', 'blue')) # 4 regions
#incomeRegionsPlot = ggplot(bank_data, aes(region, income, fill = region)) + geom_boxplot() # income by region
incomeRegionsPlot = ggplot(bank_data, aes(incomeF)) + geom_bar(aes(fill = region))
grid.arrange(regionsPlot, incomeRegionsPlot, ncol = 2)
sexPlot = ggplot(bank_data, aes(sex)) + geom_bar(aes(fill = region)) # equal sex count
incomeSexPlot = ggplot(bank_data, aes(sex, income, fill = region)) + geom_boxplot()  # income by sex
grid.arrange(sexPlot, incomeSexPlot)
marriedPlot = ggplot(bank_data, aes(married)) + geom_bar(aes(fill = sex)) + scale_fill_manual( values = c('red', 'blue'))# more are married
marriedPlot01 = ggplot(bank_data, aes(married)) + geom_bar(aes(fill = region)) + theme(legend.position = "none")# more are married
childrenPlot = ggplot(bank_data, aes(children)) + geom_bar(aes(fill = region))
grid.arrange(marriedPlot, marriedPlot01, childrenPlot, ncol = 3)
carPlot = ggplot(bank_data, aes(car)) + geom_bar()
savePlot = ggplot(bank_data, aes(save_act)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
currentPlot = ggplot(bank_data, aes(current_act)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
mortagePlot = ggplot(bank_data, aes(mortgage)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
pepPlot = ggplot(bank_data, aes(pep)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
legend = getLegend(pepPlot)
grid.arrange(savePlot, currentPlot, mortagePlot, pepPlot, legend, ncol=5)
#colorPalette = c("FEMALE" = "red", "MALE" = "blue")
xy_plot01 = ggplot(bank_data, aes(age, income)) + geom_point(aes(color = region, shape = pep, size = 1)) + scale_fill_manual( values = c('red', 'blue'))
xy_plot02 = ggplot(bank_data, aes(age, income)) + geom_point(aes(color = region , shape = pep )) + scale_fill_manual( values = c('yellow', 'green'))
grid.arrange(xy_plot01, xy_plot02)
ggplot(bank_data, aes(incomeF)) + geom_bar(aes(fill = region))
# =============================================================================================================
# Rule mining
# =============================================================================================================
bank_data_rules = bank_data[, c(-1,-4)] # remove cols age and income
str(bank_data_rules)
# Get the rules
rules01 = apriori(bank_data_rules, parameter = list(supp = 0.15, conf = 0.8))
length(rules01) # 19
# top 5 rules by confidence
options(digits=2)
rules01 = sort(rules01, by="confidence", decreasing=TRUE)
inspect(rules01)
# top 5 rules by lift
rules01 = sort(rules01, by="lift", decreasing=TRUE)
inspect(rules01)
# top 5 rules by support
rules01 = sort(rules01, by="support", decreasing=TRUE)
inspect(rules01[1:10])
rules01 = sort(rules01, by="count", decreasing=TRUE)
inspect(rules01[1:10])
# set pep to rhs
rules02 = apriori(data = bank_data_rules, parameter=list(supp=0.01, conf = .9),
appearance = list(default="lhs",rhs="pep=YES"),
control = list(verbose=FALSE, sort=TRUE))
length(rules02) #1,434
summary(rules02)
rules02 = sort(rules02, by="confidence", decreasing=TRUE)
inspect(rules02[1:10])
rules02 = sort(rules02, by="lift", decreasing=TRUE)
inspect(rules02[1:10])
rules02 = sort(rules02, by="support", decreasing=TRUE)
inspect(rules02[1:10])
# =============================================================================================================
# INTRESTING RULES
# =============================================================================================================
#                                                       support       confidence    lift        count
# {sex=FEMALE,region=INNER_CITY} => {current_act=YES}   0.1750000     0.8015267     1.056958    105
# {children=1,save_act=YES,ageF=fourties} => {pep=YES}  0.04333333    1             2.189781    26
# {married=YES,children=1,incomeF=TWENTY K}=> {pep=YES} 0.04666667    1             2.189781    28
ggplot(bank_data_rules[bank_data_rules$sex=='FEMALE',], aes(region)) + geom_bar(aes(fill = current_act)) # equal sex count
ggplot(bank_data_rules, aes(ageF)) + geom_bar(aes(fill = save_act))
ggplot(bank_data_rules, aes(save_act)) + geom_bar(aes(fill = ageF))
# =============================================================================================================
# {children=1} => {pep=YES}                             0.1833333     0.8148148     1.784266    110
# {married=YES,children=0,save_act=YES} => {pep=NO}     0.1783333     0.8991597     1.654895    107
ggplot(bank_data, aes(children)) +  geom_bar(aes(fill = pep))
ggplot(bank_data[bank_data$married=='YES',], aes(children)) +  geom_bar(aes(fill = pep))
ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES',], aes(children)) +  geom_bar(aes(fill = pep))
# {children=1,save_act=YES,ageF=fourties} => {pep=YES}  0.04333333    1             2.189781    26
ggplot(bank_data[bank_data$childrenInt == 1 & bank_data$save_act=='YES',], aes(ageF) ) + geom_bar(aes(fill = pep))
# {married=YES,children=1,incomeF=TWENTY K}=> {pep=YES} 0.04666667    1             2.189781    28
ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES' & bank_data$childrenInt == 1,], aes(incomeF) ) + geom_bar(aes(fill = pep))
# leads to...
ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES' & bank_data$childrenInt == 2,], aes(ageF) ) + geom_bar(aes(fill = pep))
#ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES' & bank_data$childrenInt == 2 & bank_data$pep=='YES',], aes(ageF) ) + geom_bar(aes(fill = incomeF))
# Diego Valdes
# IST 707
# Apr 14, 2019
# HW 3
# =============================================================================================================
# RESET WORKSPACE
# =============================================================================================================
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
# =============================================================================================================
# LIBRARIES
# =============================================================================================================
#library(tidyr)
#library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
#library(lattice)
library(arules)
library(arulesViz)
library(datasets)
originalWD = getwd() # get original wd for saving to .r file
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/003_HW")
# =============================================================================================================
# IMPORT AND CLEAN DATA
# =============================================================================================================
bankData_og = read.csv2("bankdata_csv_all.csv", sep = ',', stringsAsFactors = FALSE)
naInData(bankData_og)# no NA
bank_data = bankData_og[,-1] # remove id col
str(bank_data) # to factor: 2,3:11
colToFactor = c(2,3,5:11)
colToNum = c(4)
colNames = colnames(bank_data)
colNames
colNames[c(2,3,5:11)]
colNames[4]
bank_data = toFactor(bank_data, colToFactor) # change defined cols to factors
bank_data = toNumeric(bank_data, colToNum) # change defined cols to numeric
str(bank_data)
# adding cols for factorizing income and age
summary(bank_data$income)
bank_data$incomeF = cut(bank_data$income, breaks = c(0,10000,20000,30000,40000,50000,60000,Inf),
labels = c("ZERO","TEN K","TWENTY K","THIRTY K","FOURTY K","FIFTY K","SIXTY K"))
summary(bank_data$age)
bank_data$ageF = cut(bank_data$age, breaks = c(0,10,20,30,40,50,60,Inf),
labels = c("child","teens","twenties","thirties","fourties","fifties","sixties"))
# adding col for int of children
bank_data$childrenInt=as.integer(bank_data$children)
summary(bank_data)
str(bank_data)
summary(bank_data$income)
summary(bank_data[bank_data$sex=='FEMALE',]$income)
summary(bank_data[bank_data$sex=='MALE',]$income)
# =============================================================================================================
# TO EXPLORE STRANGE NEW DATASETS, TO SEEK OUT NEW ANSWERS TO OLD SOLUTIONS,
# TO BOLDY DISCOVER WHAT NO ONE HAS DISCOVERD BEFORE!
# =============================================================================================================
regionsPlot = ggplot(bank_data, aes(region)) + geom_bar(aes(fill = sex))+ scale_fill_manual( values = c('red', 'blue')) # 4 regions
#incomeRegionsPlot = ggplot(bank_data, aes(region, income, fill = region)) + geom_boxplot() # income by region
incomeRegionsPlot = ggplot(bank_data, aes(incomeF)) + geom_bar(aes(fill = region))
grid.arrange(regionsPlot, incomeRegionsPlot, ncol = 2)
sexPlot = ggplot(bank_data, aes(sex)) + geom_bar(aes(fill = region)) # equal sex count
incomeSexPlot = ggplot(bank_data, aes(sex, income, fill = region)) + geom_boxplot()  # income by sex
grid.arrange(sexPlot, incomeSexPlot)
# =============================================================================================================
# get the legend from a ggplot
#
getLegend = function(gplot){
tmp = ggplot_gtable(ggplot_build(gplot))
leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
return(tmp$grobs[[leg]])
}
# =============================================================================================================
# get number of na in each column
#
naInData = function(dataset) {
nas = c()
for (i in 1:length(dataset)) {
nas = cbind(nas, sum(nas, is.na(dataset[,i])))
}
nas = data.frame(nas)
colnames(nas) = colnames(dataset)
return(nas)
}
# =============================================================================================================
# converts cols in a dataset to factor
#
toFactor = function(dataset, columns) {
for (i in 1:length(columns)) {
dataset[,columns[i]] = as.factor(dataset[,columns[i]])
}
return(dataset)
}
# =============================================================================================================
# converts cols in a dataset to numeric
#
toNumeric = function(dataset, columns) {
for (i in 1:length(columns)) {
dataset[,columns[i]] = as.numeric(dataset[,columns[i]])
}
return(dataset)
}
# Diego Valdes
# IST 707
# Apr 14, 2019
# HW 3
# =============================================================================================================
# RESET WORKSPACE
# =============================================================================================================
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
# =============================================================================================================
# LIBRARIES
# =============================================================================================================
#library(tidyr)
#library(reshape)
library(gridExtra)
library(grid)
library(ggplot2)
#library(lattice)
library(arules)
library(arulesViz)
library(datasets)
originalWD = getwd() # get original wd for saving to .r file
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/003_HW")
# =============================================================================================================
# IMPORT AND CLEAN DATA
# =============================================================================================================
bankData_og = read.csv2("bankdata_csv_all.csv", sep = ',', stringsAsFactors = FALSE)
naInData(bankData_og)# no NA
bank_data = bankData_og[,-1] # remove id col
str(bank_data) # to factor: 2,3:11
colToFactor = c(2,3,5:11)
colToNum = c(4)
colNames = colnames(bank_data)
colNames
colNames[c(2,3,5:11)]
colNames[4]
bank_data = toFactor(bank_data, colToFactor) # change defined cols to factors
bank_data = toNumeric(bank_data, colToNum) # change defined cols to numeric
str(bank_data)
# adding cols for factorizing income and age
summary(bank_data$income)
bank_data$incomeF = cut(bank_data$income, breaks = c(0,10000,20000,30000,40000,50000,60000,Inf),
labels = c("ZERO","TEN K","TWENTY K","THIRTY K","FOURTY K","FIFTY K","SIXTY K"))
summary(bank_data$age)
bank_data$ageF = cut(bank_data$age, breaks = c(0,10,20,30,40,50,60,Inf),
labels = c("child","teens","twenties","thirties","fourties","fifties","sixties"))
# adding col for int of children
bank_data$childrenInt=as.integer(bank_data$children)
summary(bank_data)
str(bank_data)
summary(bank_data$income)
summary(bank_data[bank_data$sex=='FEMALE',]$income)
summary(bank_data[bank_data$sex=='MALE',]$income)
# =============================================================================================================
# TO EXPLORE STRANGE NEW DATASETS, TO SEEK OUT NEW ANSWERS TO OLD SOLUTIONS,
# TO BOLDY DISCOVER WHAT NO ONE HAS DISCOVERD BEFORE!
# =============================================================================================================
regionsPlot = ggplot(bank_data, aes(region)) + geom_bar(aes(fill = sex))+ scale_fill_manual( values = c('red', 'blue')) # 4 regions
#incomeRegionsPlot = ggplot(bank_data, aes(region, income, fill = region)) + geom_boxplot() # income by region
incomeRegionsPlot = ggplot(bank_data, aes(incomeF)) + geom_bar(aes(fill = region))
grid.arrange(regionsPlot, incomeRegionsPlot, ncol = 2)
sexPlot = ggplot(bank_data, aes(sex)) + geom_bar(aes(fill = region)) # equal sex count
incomeSexPlot = ggplot(bank_data, aes(sex, income, fill = region)) + geom_boxplot()  # income by sex
grid.arrange(sexPlot, incomeSexPlot)
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/003_HW")
bankData_og = read.csv2("bankdata_csv_all.csv", sep = ',', stringsAsFactors = FALSE)
naInData(bankData_og)# no NA
bank_data = bankData_og[,-1] # remove id col
bankData_og = read.csv2("bankdata_csv_all.csv", sep = ',', stringsAsFactors = FALSE)
naInData(bankData_og)# no NA
# =============================================================================================================
# converts cols in a dataset to factor
#
toFactor = function(dataset, columns) {
for (i in 1:length(columns)) {
dataset[,columns[i]] = as.factor(dataset[,columns[i]])
}
return(dataset)
}
# =============================================================================================================
# converts cols in a dataset to numeric
#
toNumeric = function(dataset, columns) {
for (i in 1:length(columns)) {
dataset[,columns[i]] = as.numeric(dataset[,columns[i]])
}
return(dataset)
}
# =============================================================================================================
# get number of na in each column
#
naInData = function(dataset) {
nas = c()
for (i in 1:length(dataset)) {
nas = cbind(nas, sum(nas, is.na(dataset[,i])))
}
nas = data.frame(nas)
colnames(nas) = colnames(dataset)
return(nas)
}
naInData(bankData_og)# no NA
bank_data = bankData_og[,-1] # remove id col
str(bank_data) # to factor: 2,3:11
colToFactor = c(2,3,5:11)
colToNum = c(4)
colNames = colnames(bank_data)
colNames
colNames[c(2,3,5:11)]
colNames[4]
bank_data = toFactor(bank_data, colToFactor) # change defined cols to factors
bank_data = toNumeric(bank_data, colToNum) # change defined cols to numeric
str(bank_data)
# adding cols for factorizing income and age
summary(bank_data$income)
bank_data$incomeF = cut(bank_data$income, breaks = c(0,10000,20000,30000,40000,50000,60000,Inf),
labels = c("ZERO","TEN K","TWENTY K","THIRTY K","FOURTY K","FIFTY K","SIXTY K"))
summary(bank_data$age)
bank_data$ageF = cut(bank_data$age, breaks = c(0,10,20,30,40,50,60,Inf),
labels = c("child","teens","twenties","thirties","fourties","fifties","sixties"))
# adding col for int of children
bank_data$childrenInt=as.integer(bank_data$children)
summary(bank_data)
str(bank_data)
summary(bank_data$income)
summary(bank_data[bank_data$sex=='FEMALE',]$income)
summary(bank_data[bank_data$sex=='MALE',]$income)
regionsPlot = ggplot(bank_data, aes(region)) + geom_bar(aes(fill = sex))+ scale_fill_manual( values = c('red', 'blue')) # 4 regions
#incomeRegionsPlot = ggplot(bank_data, aes(region, income, fill = region)) + geom_boxplot() # income by region
incomeRegionsPlot = ggplot(bank_data, aes(incomeF)) + geom_bar(aes(fill = region))
grid.arrange(regionsPlot, incomeRegionsPlot, ncol = 2)
sexPlot = ggplot(bank_data, aes(sex)) + geom_bar(aes(fill = region)) # equal sex count
incomeSexPlot = ggplot(bank_data, aes(sex, income, fill = region)) + geom_boxplot()  # income by sex
grid.arrange(sexPlot, incomeSexPlot)
marriedPlot = ggplot(bank_data, aes(married)) + geom_bar(aes(fill = sex)) + scale_fill_manual( values = c('red', 'blue'))# more are married
marriedPlot01 = ggplot(bank_data, aes(married)) + geom_bar(aes(fill = region)) + theme(legend.position = "none")# more are married
childrenPlot = ggplot(bank_data, aes(children)) + geom_bar(aes(fill = region))
grid.arrange(marriedPlot, marriedPlot01, childrenPlot, ncol = 3)
carPlot = ggplot(bank_data, aes(car)) + geom_bar()
savePlot = ggplot(bank_data, aes(save_act)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
currentPlot = ggplot(bank_data, aes(current_act)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
mortagePlot = ggplot(bank_data, aes(mortgage)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
pepPlot = ggplot(bank_data, aes(pep)) + geom_bar(aes(fill = region)) + theme(legend.position = "none") + ylim(0,500)
legend = getLegend(pepPlot)
grid.arrange(savePlot, currentPlot, mortagePlot, pepPlot, legend, ncol=5)
#colorPalette = c("FEMALE" = "red", "MALE" = "blue")
xy_plot01 = ggplot(bank_data, aes(age, income)) + geom_point(aes(color = region, shape = pep, size = 1)) + scale_fill_manual( values = c('red', 'blue'))
# =============================================================================================================
# get the legend from a ggplot
#
getLegend = function(gplot){
tmp = ggplot_gtable(ggplot_build(gplot))
leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
return(tmp$grobs[[leg]])
}
legend = getLegend(pepPlot)
grid.arrange(savePlot, currentPlot, mortagePlot, pepPlot, legend, ncol=5)
#colorPalette = c("FEMALE" = "red", "MALE" = "blue")
xy_plot01 = ggplot(bank_data, aes(age, income)) + geom_point(aes(color = region, shape = pep, size = 1)) + scale_fill_manual( values = c('red', 'blue'))
xy_plot02 = ggplot(bank_data, aes(age, income)) + geom_point(aes(color = region , shape = pep )) + scale_fill_manual( values = c('yellow', 'green'))
grid.arrange(xy_plot01, xy_plot02)
ggplot(bank_data, aes(incomeF)) + geom_bar(aes(fill = region))
bank_data_rules = bank_data[, c(-1,-4)] # remove cols age and income
str(bank_data_rules)
# Get the rules
rules01 = apriori(bank_data_rules, parameter = list(supp = 0.15, conf = 0.8))
length(rules01) # 19
bank_data
bank_data_rules = bank_data[, c(-1,-4,-14)] # remove cols age and income
str(bank_data_rules)
# Get the rules
rules01 = apriori(bank_data_rules, parameter = list(supp = 0.15, conf = 0.8))
length(rules01) # 19
# top 5 rules by confidence
options(digits=2)
rules01 = sort(rules01, by="confidence", decreasing=TRUE)
inspect(rules01)
# top 5 rules by lift
rules01 = sort(rules01, by="lift", decreasing=TRUE)
inspect(rules01)
# top 5 rules by support
rules01 = sort(rules01, by="support", decreasing=TRUE)
inspect(rules01[1:10])
rules01 = sort(rules01, by="count", decreasing=TRUE)
inspect(rules01[1:10])
# set pep to rhs
rules02 = apriori(data = bank_data_rules, parameter=list(supp=0.01, conf = .9),
appearance = list(default="lhs",rhs="pep=YES"),
control = list(verbose=FALSE, sort=TRUE))
length(rules02) #1,434
summary(rules02)
rules02 = sort(rules02, by="confidence", decreasing=TRUE)
inspect(rules02[1:10])
rules02 = sort(rules02, by="lift", decreasing=TRUE)
inspect(rules02[1:10])
rules02 = sort(rules02, by="support", decreasing=TRUE)
inspect(rules02[1:10])
ggplot(bank_data_rules[bank_data_rules$sex=='FEMALE',], aes(region)) + geom_bar(aes(fill = current_act)) # equal sex count
ggplot(bank_data_rules, aes(ageF)) + geom_bar(aes(fill = save_act))
ggplot(bank_data_rules, aes(save_act)) + geom_bar(aes(fill = ageF))
# =============================================================================================================
# {children=1} => {pep=YES}                             0.1833333     0.8148148     1.784266    110
# {married=YES,children=0,save_act=YES} => {pep=NO}     0.1783333     0.8991597     1.654895    107
ggplot(bank_data, aes(children)) +  geom_bar(aes(fill = pep))
ggplot(bank_data[bank_data$married=='YES',], aes(children)) +  geom_bar(aes(fill = pep))
ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES',], aes(children)) +  geom_bar(aes(fill = pep))
# {children=1,save_act=YES,ageF=fourties} => {pep=YES}  0.04333333    1             2.189781    26
ggplot(bank_data[bank_data$childrenInt == 1 & bank_data$save_act=='YES',], aes(ageF) ) + geom_bar(aes(fill = pep))
# {married=YES,children=1,incomeF=TWENTY K}=> {pep=YES} 0.04666667    1             2.189781    28
ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES' & bank_data$childrenInt == 1,], aes(incomeF) ) + geom_bar(aes(fill = pep))
# leads to...
ggplot(bank_data[bank_data$married=='YES' & bank_data$save_act=='YES' & bank_data$childrenInt == 2,], aes(ageF) ) + geom_bar(aes(fill = pep))
plot(rules02[1:10])
plot(rules02[1:10], method='graph', engine = 'interactive', shading = 'confidence')
plot(rules02[1:10], method='graph', engine = 'interactive', shading = 'confidence')
rm(list=ls()) # clear work space
dev.off(dev.list()["RStudioGD"]) # clear plots
originalWD = getwd() # get original wd for saving to .r file
setwd("C:/Users/dvjr2/Documents")
# https://catalog.data.gov/dataset/city-of-seattle-wages-comparison-by-gender-average-hourly-wage-by-age-353b2
Seatle_OG = read.csv('Seatle.csv', stringsAsFactors = FALSE)
colnames(Seatle_OG)
?distance
?dist
load("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/004_HW/.RData")
clusplot(unlabeledScale, model_s.k$cluster, main = "Scaled Cluster", color=TRUE, shade=TRUE, labels=2, lines=0) # kmeans
loadLibraries()
clusplot(unlabeledScale, model_s.k$cluster, main = "Scaled Cluster", color=TRUE, shade=TRUE, labels=2, lines=0) # kmeans
originalWD = getwd() # get original wd for saving to .r file
setwd("C:/Users/dvjr2/Google Drive/Documents/Syracuse/IST_707/HW/004_HW")
View(scale_fed_data_v2)
View(fed_data)
onePaperPlot
plotHeatMap_v2
unlabeledScaleV2 = scale_fed_data_v2[,c(-2:-1)]
# suggested number of clusters
fviz_nbclust(unlabeledScaleV2, kmeans, method="wss" )
loadLibraries()
# suggested number of clusters
fviz_nbclust(unlabeledScaleV2, kmeans, method="wss" )
# k means
model_s.kV2 = kmeans(unlabeledScaleV2, 4)
plotcluster(unlabeledScaleV2, model_s.kV2$cluster)
clusplot(unlabeledScaleV2, model_s.kV2$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
cluster_s.kV2 = model_s.kV2$cluster # get cluster assignment vector
# hierarchical
distanceV2 = dist(unlabeledScaleV2, method = 'euclidean')
model_s.hV2 = hclust(distanceV2, method = 'ward.D2')
plot(model_s.hV2)
cluster_s.h = cutree(model_s.hV2, k=4) #cluster assignments vector
cluster_s.hV2 = cutree(model_s.hV2, k=4) #cluster assignments vector
rect.hclust(model_s.hV2, k=4, border = 'red')
#em
model_s.V2e = em.cluster.R(unlabeledScaleV2, K=4, S=c(rep(TRUE, 70)))
#em
model_s.eV2 = em.cluster.R(unlabeledScaleV2, K=4, S=c(rep(TRUE, 70)))
cluster_s.eV2 = model_s.eV2["mapClassification"] # cluster assignments vector
cluster_scaledV2 = data.frame(scale_fed_data[,c(1,2)], cluster_s.kV2, cluster_s.hV2 ,cluster_s.eV2 ) #kmeans assignments
cluster_scaledV2$cluster_s.eV2 = cluster_s.e+1 # cluster classifications match other results: range 0-3 -> 1-4
cluster_scaledV2
prediction.sV2 = aggregate(cluster_scaledV2[,-1:-2], by=list(cluster_scaledV2$author), FUN=Mode)
clusterNames_SV2 = c("Author","cluster_k","cluster_h","cluster_e")
colnames(prediction.sV2) = clusterNames_SV2
grid.table(prediction.sV2[-1,])
essay_predict_scV2 = cluster_scaledV2[cluster_scaledV2$author=='dispt',]
essay_predict_scV2
authors_scV2 = essay_predict_scV2[,c(-1,-2)]
authors_scV2 = convertAuthor(prediction.sV2[-1,],authors_scV2,2,1 )
authors_scV2 = convertAuthor(prediction.sV2[-1,],authors_scV2,3,2 )
authors_scV2 = convertAuthor(prediction.sV2[-1,],authors_scV2,4,3 )
authors_scV2 = essay_predict_scV2[,c(-1,-2)]
authors_scV2 = convertAuthor(prediction.sV2[-1,],authors_scV2,2,1 )
authors_scV2 = convertAuthor(prediction.sV2[-1,],authors_scV2,3,2 )
authors_scV2 = convertAuthor(prediction.sV2[-1,],authors_scV2,4,3 )
grid.table(authors_scV2)
View(fed_data)
View(fed_data)
